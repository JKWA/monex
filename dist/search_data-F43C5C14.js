searchData={"items":[{"type":"module","title":"Examples.Patron","doc":"The `Examples.Patron` module provides an example of how to represent a patron visiting a venue or amusement park.\nIt shows how to use Monex’s `Predicate` module to combine and work with multiple conditions in an easy-to-understand way.\n\nThis module covers:\n\n- Creating a `Patron` with `new/3`.\n- Checking the patron’s height using `too_short?/1`, `too_tall?/1`, and `valid_height?/1`.\n- Checking and adjusting the number of tickets with `has_ticket?/1`, `increment_ticket/1`, and `decrement_ticket/1`.\n\nYou will also learn how to use predicates, a powerful concept in Monex, to validate multiple conditions about a patron.","ref":"Examples.Patron.html"},{"type":"function","title":"Examples.Patron.decrement_ticket/1","doc":"Decrements the number of tickets a patron has by 1.","ref":"Examples.Patron.html#decrement_ticket/1"},{"type":"function","title":"Examples - Examples.Patron.decrement_ticket/1","doc":"iex> patron = Examples.Patron.new(\"John\", 170, 2)\n    iex> patron = Examples.Patron.decrement_ticket(patron)\n    iex> patron.tickets\n    1","ref":"Examples.Patron.html#decrement_ticket/1-examples"},{"type":"function","title":"Examples.Patron.has_ticket?/1","doc":"Checks if the patron has at least one ticket.","ref":"Examples.Patron.html#has_ticket?/1"},{"type":"function","title":"Examples - Examples.Patron.has_ticket?/1","doc":"iex> patron_with_ticket = Examples.Patron.new(\"Ticket Holder\", 180, 1)\n    iex> Examples.Patron.has_ticket?(patron_with_ticket)\n    true\n\n    iex> patron_no_ticket = Examples.Patron.new(\"No Ticket\", 175, 0)\n    iex> Examples.Patron.has_ticket?(patron_no_ticket)\n    false","ref":"Examples.Patron.html#has_ticket?/1-examples"},{"type":"function","title":"Examples.Patron.increment_ticket/1","doc":"Increments the number of tickets a patron has by 1.","ref":"Examples.Patron.html#increment_ticket/1"},{"type":"function","title":"Examples - Examples.Patron.increment_ticket/1","doc":"iex> patron = Examples.Patron.new(\"John\", 170, 2)\n    iex> patron = Examples.Patron.increment_ticket(patron)\n    iex> patron.tickets\n    3","ref":"Examples.Patron.html#increment_ticket/1-examples"},{"type":"function","title":"Examples.Patron.new/3","doc":"Creates a new `Patron` with the given `name`, `height`, and number of `tickets`.","ref":"Examples.Patron.html#new/3"},{"type":"function","title":"Examples - Examples.Patron.new/3","doc":"iex> john = Examples.Patron.new(\"John\", 170, 2)\n    %Examples.Patron{name: \"John\", height: 170, tickets: 2}","ref":"Examples.Patron.html#new/3-examples"},{"type":"function","title":"Examples.Patron.too_short?/1","doc":"Checks if the patron is too short (less than 150 cm).","ref":"Examples.Patron.html#too_short?/1"},{"type":"function","title":"Examples - Examples.Patron.too_short?/1","doc":"iex> john = Examples.Patron.new(\"John\", 140, 2)\n    iex> Examples.Patron.too_short?(john)\n    true\n\n    iex> jane = Examples.Patron.new(\"Jane\", 160, 1)\n    iex> Examples.Patron.too_short?(jane)\n    false","ref":"Examples.Patron.html#too_short?/1-examples"},{"type":"function","title":"Examples.Patron.too_tall?/1","doc":"Checks if the patron is too tall (more than 200 cm).","ref":"Examples.Patron.html#too_tall?/1"},{"type":"function","title":"Examples - Examples.Patron.too_tall?/1","doc":"iex> tall_patron = Examples.Patron.new(\"Tall Guy\", 210, 1)\n    iex> Examples.Patron.too_tall?(tall_patron)\n    true\n\n    iex> average_patron = Examples.Patron.new(\"Average Joe\", 170, 2)\n    iex> Examples.Patron.too_tall?(average_patron)\n    false","ref":"Examples.Patron.html#too_tall?/1-examples"},{"type":"function","title":"Examples.Patron.valid_height?/1","doc":"Checks if the patron's height is valid, meaning they are neither too short nor too tall.\n\nThis combines the `too_short?/1` and `too_tall?/1` predicates using Monex's `Predicate.p_and/2` and `Predicate.p_not/1`.","ref":"Examples.Patron.html#valid_height?/1"},{"type":"function","title":"Examples - Examples.Patron.valid_height?/1","doc":"iex> short_patron = Examples.Patron.new(\"Shorty\", 140, 1)\n    iex> Examples.Patron.valid_height?(short_patron)\n    false\n\n    iex> perfect_patron = Examples.Patron.new(\"Perfect Height\", 180, 2)\n    iex> Examples.Patron.valid_height?(perfect_patron)\n    true","ref":"Examples.Patron.html#valid_height?/1-examples"},{"type":"type","title":"Examples.Patron.t/0","doc":"","ref":"Examples.Patron.html#t:t/0"},{"type":"module","title":"Examples.Ride","doc":"The `Examples.Ride` module demonstrates how to manage patrons taking a ride at an amusement park,\nfocusing on checking their height and ticket availability before allowing them to take the ride.\n\nThis module uses common Elixir patterns such as:\n- **Pattern matching**: For handling different outcomes, like whether the patron meets height and ticket requirements.\n- **The `with` construct**: To chain multiple validations before taking a ride.\n- **Tagged tuples (`{:ok, _}` and `{:error, _}`)**: To indicate success or failure.\n\nThe module provides functions to:\n- Register a new patron with `register_patron/3`.\n- Validate a patron’s height with `check_valid_height/1`.\n- Check if a patron has enough tickets with `check_ticket_availability/1`.\n- Take a ride with `take_ride/1`.\n- Add a ticket to a patron with `add_ticket/1`.","ref":"Examples.Ride.html"},{"type":"function","title":"Examples.Ride.add_ticket/1","doc":"Adds a ticket to a patron if they are successfully registered.\nReturns `{:ok, patron}` with the updated number of tickets, or the existing `{:error, reason}` if adding a ticket isn't possible.","ref":"Examples.Ride.html#add_ticket/1"},{"type":"function","title":"Examples - Examples.Ride.add_ticket/1","doc":"iex> {:ok, patron} = Examples.Ride.register_patron(\"Jane\", 170, 1)\n    iex> {:ok, patron} = Examples.Ride.add_ticket({:ok, patron})\n    iex> patron.tickets\n    2\n\n    iex> {:error, reason} = Examples.Ride.add_ticket({:error, \"Failed to register\"})\n    {:error, \"Failed to register\"}","ref":"Examples.Ride.html#add_ticket/1-examples"},{"type":"function","title":"Examples.Ride.check_ticket_availability/1","doc":"Checks if the patron has enough tickets (at least 1).\nReturns `{:ok, patron}` if the patron has tickets, or `{:error, reason}` otherwise.","ref":"Examples.Ride.html#check_ticket_availability/1"},{"type":"function","title":"Examples - Examples.Ride.check_ticket_availability/1","doc":"iex> {:ok, patron} = Examples.Ride.register_patron(\"Jane\", 170, 1)\n    iex> Examples.Ride.check_ticket_availability(patron)\n    {:ok, patron}\n\n    iex> {:ok, patron} = Examples.Ride.register_patron(\"No Tickets\", 175, 0)\n    iex> Examples.Ride.check_ticket_availability(patron)\n    {:error, \"Patron is out of tickets\"}","ref":"Examples.Ride.html#check_ticket_availability/1-examples"},{"type":"function","title":"Examples.Ride.check_valid_height/1","doc":"Validates that a patron’s height is within the valid range (150-200 cm).\nReturns `{:ok, patron}` if the height is valid, or `{:error, reason}` otherwise.","ref":"Examples.Ride.html#check_valid_height/1"},{"type":"function","title":"Examples - Examples.Ride.check_valid_height/1","doc":"iex> {:ok, patron} = Examples.Ride.register_patron(\"Jane\", 170, 1)\n    iex> Examples.Ride.check_valid_height(patron)\n    {:ok, patron}\n\n    iex> {:ok, patron} = Examples.Ride.register_patron(\"Shorty\", 140, 1)\n    iex> Examples.Ride.check_valid_height(patron)\n    {:error, \"Patron's height is not valid\"}","ref":"Examples.Ride.html#check_valid_height/1-examples"},{"type":"function","title":"Examples.Ride.register_patron/3","doc":"Registers a new patron with a name, height, and number of tickets. This function returns an `{:ok, patron}` tuple.","ref":"Examples.Ride.html#register_patron/3"},{"type":"function","title":"Examples - Examples.Ride.register_patron/3","doc":"iex> {:ok, patron} = Examples.Ride.register_patron(\"John\", 170, 2)\n    iex> patron.name\n    \"John\"","ref":"Examples.Ride.html#register_patron/3-examples"},{"type":"function","title":"Examples.Ride.take_ride/1","doc":"Processes a patron to take a ride by first checking if they have a valid height and enough tickets.\nIf both checks pass, it decrements the number of tickets they have and returns `{:ok, patron}`.\nIf any check fails, it returns the corresponding `{:error, reason}`.\n\nThis function uses the `with` construct to chain validations.","ref":"Examples.Ride.html#take_ride/1"},{"type":"function","title":"Examples - Examples.Ride.take_ride/1","doc":"iex> {:ok, patron} = Examples.Ride.register_patron(\"John\", 170, 2)\n    iex> Examples.Ride.take_ride({:ok, patron})\n    {:ok, %Examples.Patron{tickets: 1}}\n\n    iex> {:ok, patron} = Examples.Ride.register_patron(\"John\", 140, 2)\n    iex> Examples.Ride.take_ride({:ok, patron})\n    {:error, \"Patron's height is not valid\"}","ref":"Examples.Ride.html#take_ride/1-examples"},{"type":"type","title":"Examples.Ride.error_message/0","doc":"","ref":"Examples.Ride.html#t:error_message/0"},{"type":"type","title":"Examples.Ride.patron_context/0","doc":"","ref":"Examples.Ride.html#t:patron_context/0"},{"type":"module","title":"Examples.RideLazyTaskMonad","doc":"The `Examples.RideLazyTaskMonad` module demonstrates how to handle ride management using the `LazyTaskEither` monad from the `Monex` library.\nThis module allows for handling asynchronous tasks, such as validating a patron's height and checking ticket availability, while maintaining a clear, monadic flow for success and failure.\n\nThe key difference from the `Either` monad is that `LazyTaskEither` handles computations that may involve time delays or asynchronous execution, and those computations are deferred until they are explicitly run.","ref":"Examples.RideLazyTaskMonad.html"},{"type":"module","title":"Key Functions: - Examples.RideLazyTaskMonad","doc":"- `register_patron/3`: Registers a new patron and wraps them in the `LazyTaskEither` monad.\n- `check_valid_height/1`: Validates a patron’s height asynchronously.\n- `check_ticket_availability/1`: Asynchronously checks if the patron has enough tickets.\n- `take_ride/1`: Chains together the validations and ticket deduction asynchronously.\n- `add_ticket/1`: Adds a ticket to the patron asynchronously using function application within the `LazyTaskEither` monad.\n\nThe use of asynchronous validation introduces a slight delay, represented by `:timer.sleep/1` in the code, to simulate real-world scenarios such as waiting for database lookups or external API calls.","ref":"Examples.RideLazyTaskMonad.html#module-key-functions"},{"type":"function","title":"Examples.RideLazyTaskMonad.add_ticket/1","doc":"Adds a ticket to the patron asynchronously using function application within the `LazyTaskEither` monad.","ref":"Examples.RideLazyTaskMonad.html#add_ticket/1"},{"type":"function","title":"Examples - Examples.RideLazyTaskMonad.add_ticket/1","doc":"iex> task = Examples.RideLazyTaskMonad.register_patron(\"John\", 170, 2)\n    iex> task = Examples.RideLazyTaskMonad.add_ticket(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 3}}","ref":"Examples.RideLazyTaskMonad.html#add_ticket/1-examples"},{"type":"function","title":"Examples.RideLazyTaskMonad.check_ticket_availability/1","doc":"Asynchronously checks if the patron has enough tickets (at least 1). If the patron has tickets, it returns `Right(patron)`; otherwise, it returns `Left(\"Patron is out of tickets\")`.\n\nThis function uses a simulated delay (`:timer.sleep/1`) to represent an asynchronous check process.","ref":"Examples.RideLazyTaskMonad.html#check_ticket_availability/1"},{"type":"function","title":"Examples - Examples.RideLazyTaskMonad.check_ticket_availability/1","doc":"iex> task = Examples.RideLazyTaskMonad.register_patron(\"John\", 170, 2)\n    iex> task = Examples.RideLazyTaskMonad.check_ticket_availability(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> task = Examples.RideLazyTaskMonad.register_patron(\"Ticketless\", 180, 0)\n    iex> task = Examples.RideLazyTaskMonad.check_ticket_availability(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Left{value: \"Patron is out of tickets\"}","ref":"Examples.RideLazyTaskMonad.html#check_ticket_availability/1-examples"},{"type":"function","title":"Examples.RideLazyTaskMonad.check_valid_height/1","doc":"Asynchronously checks if the patron’s height is valid (between 150 and 200 cm). If the height is valid, it returns `Right(patron)`; otherwise, it returns `Left(\"Patron's height is not valid\")`.\n\nThis function uses a simulated delay (`:timer.sleep/1`) to represent an asynchronous validation process.","ref":"Examples.RideLazyTaskMonad.html#check_valid_height/1"},{"type":"function","title":"Examples - Examples.RideLazyTaskMonad.check_valid_height/1","doc":"iex> task = Examples.RideLazyTaskMonad.register_patron(\"John\", 170, 2)\n    iex> task = Examples.RideLazyTaskMonad.check_valid_height(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> task = Examples.RideLazyTaskMonad.register_patron(\"Shorty\", 140, 1)\n    iex> task = Examples.RideLazyTaskMonad.check_valid_height(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideLazyTaskMonad.html#check_valid_height/1-examples"},{"type":"function","title":"Examples.RideLazyTaskMonad.register_patron/3","doc":"Registers a new patron with the given name, height, and number of tickets, returning the result wrapped in the `LazyTaskEither` monad.","ref":"Examples.RideLazyTaskMonad.html#register_patron/3"},{"type":"function","title":"Examples - Examples.RideLazyTaskMonad.register_patron/3","doc":"iex> task = Examples.RideLazyTaskMonad.register_patron(\"John\", 170, 2)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{name: \"John\", height: 170, tickets: 2}}","ref":"Examples.RideLazyTaskMonad.html#register_patron/3-examples"},{"type":"function","title":"Examples.RideLazyTaskMonad.take_ride/1","doc":"Chains together asynchronous validations for the patron’s height and ticket availability, and if both pass, decrements the patron's ticket count.\n\nThis function demonstrates how to chain monadic operations using `bind` and `map` for deferred asynchronous tasks.","ref":"Examples.RideLazyTaskMonad.html#take_ride/1"},{"type":"function","title":"Examples - Examples.RideLazyTaskMonad.take_ride/1","doc":"iex> task = Examples.RideLazyTaskMonad.register_patron(\"John\", 170, 2)\n    iex> task = Examples.RideLazyTaskMonad.take_ride(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 1}}\n\n    iex> task = Examples.RideLazyTaskMonad.register_patron(\"Shorty\", 140, 2)\n    iex> task = Examples.RideLazyTaskMonad.take_ride(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideLazyTaskMonad.html#take_ride/1-examples"},{"type":"type","title":"Examples.RideLazyTaskMonad.task_either_t/0","doc":"","ref":"Examples.RideLazyTaskMonad.html#t:task_either_t/0"},{"type":"module","title":"Examples.RideMonad","doc":"The `Examples.RideMonad` module demonstrates how to handle ride management using monads with the `Monex` library.\nMonads help chain together operations like validation and ticket management, especially when dealing with success (`Right`) and failure (`Left`) cases.\n\nThis module replaces typical Elixir pattern matching with monads, providing a way to elegantly handle sequences of operations, where each operation can succeed or fail.\n\nThe key functions in this module:\n- `register_patron/3`: Registers a new patron, wrapping them in the `Either` monad.\n- `check_valid_height/1`: Validates a patron’s height, returning either success (`Right`) or failure (`Left`).\n- `check_ticket_availability/1`: Checks if the patron has enough tickets, using the same success/failure monad approach.\n- `take_ride/1`: Combines validations and ticket deduction using monadic binding (`bind`).\n- `add_ticket/1`: Adds a ticket to the patron using function application in the monad.\n\nThe `Either` monad is used to handle success (`Right`) and failure (`Left`) results in all functions.","ref":"Examples.RideMonad.html"},{"type":"function","title":"Examples.RideMonad.add_ticket/1","doc":"Adds a ticket to the patron using function application within the `Either` monad.","ref":"Examples.RideMonad.html#add_ticket/1"},{"type":"function","title":"Examples - Examples.RideMonad.add_ticket/1","doc":"iex> {:ok, patron} = Examples.RideMonad.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonad.add_ticket(patron)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 3}}","ref":"Examples.RideMonad.html#add_ticket/1-examples"},{"type":"function","title":"Examples.RideMonad.check_ticket_availability/1","doc":"Checks if the patron has at least one ticket.\nIf the patron has tickets, returns `Right(patron)`, otherwise returns `Left(\"Patron is out of tickets\")`.","ref":"Examples.RideMonad.html#check_ticket_availability/1"},{"type":"function","title":"Examples - Examples.RideMonad.check_ticket_availability/1","doc":"iex> {:ok, patron} = Examples.RideMonad.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonad.check_ticket_availability(patron)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> {:ok, patron} = Examples.RideMonad.register_patron(\"Ticketless\", 180, 0)\n    iex> Examples.RideMonad.check_ticket_availability(patron)\n    %Monex.Either.Left{value: \"Patron is out of tickets\"}","ref":"Examples.RideMonad.html#check_ticket_availability/1-examples"},{"type":"function","title":"Examples.RideMonad.check_valid_height/1","doc":"Checks if the patron’s height is valid (between 150 and 200 cm).\nIf the height is valid, returns `Right(patron)`, otherwise returns `Left(\"Patron's height is not valid\")`.\n\nThis function uses `Either.lift_predicate/3` to apply the predicate and handle success or failure.","ref":"Examples.RideMonad.html#check_valid_height/1"},{"type":"function","title":"Examples - Examples.RideMonad.check_valid_height/1","doc":"iex> {:ok, patron} = Examples.RideMonad.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonad.check_valid_height(patron)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> {:ok, patron} = Examples.RideMonad.register_patron(\"Shorty\", 140, 1)\n    iex> Examples.RideMonad.check_valid_height(patron)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonad.html#check_valid_height/1-examples"},{"type":"function","title":"Examples.RideMonad.register_patron/3","doc":"Registers a new patron with the given name, height, and number of tickets, returning the result wrapped in the `Either` monad.","ref":"Examples.RideMonad.html#register_patron/3"},{"type":"function","title":"Examples - Examples.RideMonad.register_patron/3","doc":"iex> patron = Examples.RideMonad.register_patron(\"John\", 170, 2)\n    %Monex.Either.Right{value: %Examples.Patron{name: \"John\", height: 170, tickets: 2}}","ref":"Examples.RideMonad.html#register_patron/3-examples"},{"type":"function","title":"Examples.RideMonad.take_ride/1","doc":"Validates the patron’s height and ticket availability, and if both checks pass, decrements the patron's ticket count.\n\nThis function demonstrates how to chain monadic operations using `bind`, applying successive computations that depend on the previous result.","ref":"Examples.RideMonad.html#take_ride/1"},{"type":"function","title":"Examples - Examples.RideMonad.take_ride/1","doc":"iex> {:ok, patron} = Examples.RideMonad.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonad.take_ride(patron)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 1}}\n\n    iex> {:ok, patron} = Examples.RideMonad.register_patron(\"Shorty\", 140, 2)\n    iex> Examples.RideMonad.take_ride(patron)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonad.html#take_ride/1-examples"},{"type":"type","title":"Examples.RideMonad.either_t/0","doc":"","ref":"Examples.RideMonad.html#t:either_t/0"},{"type":"module","title":"Examples.RideMonadOperator","doc":"The `Examples.RideMonadOperator` module demonstrates how to use monadic operators from the `Monex` library to manage ride operations.\nThese operators provide a more concise syntax for chaining operations, simplifying monadic code.\n\nThe key operators used in this module are:\n- `~>>`: Chains together monadic operations, like `bind/2`.\n- `~>`: Maps a function over a monadic value, like `map/2`.\n- `<<~`: Applies a function to a monadic value, like `ap/2`.","ref":"Examples.RideMonadOperator.html"},{"type":"module","title":"Key Functions: - Examples.RideMonadOperator","doc":"- `register_patron/3`: Registers a new patron and wraps them in the `Either` monad.\n- `check_valid_height/1`: Checks if the patron’s height is valid using monadic operators.\n- `check_ticket_availability/1`: Checks if the patron has enough tickets using monadic operators.\n- `take_ride/1`: Chains together height and ticket validations and decrements the patron’s ticket count.\n- `add_ticket/1`: Adds a ticket to the patron using function application via monadic operators.","ref":"Examples.RideMonadOperator.html#module-key-functions"},{"type":"function","title":"Examples.RideMonadOperator.add_ticket/1","doc":"Adds a ticket to the patron using function application in the `Either` monad via the `<<~` operator.","ref":"Examples.RideMonadOperator.html#add_ticket/1"},{"type":"function","title":"Examples - Examples.RideMonadOperator.add_ticket/1","doc":"iex> patron = Examples.RideMonadOperator.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonadOperator.add_ticket(patron)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 3}}","ref":"Examples.RideMonadOperator.html#add_ticket/1-examples"},{"type":"function","title":"Examples.RideMonadOperator.check_ticket_availability/1","doc":"Checks if the patron has enough tickets (at least 1) using the `Either` monad.\nIf the patron has tickets, returns `Right(patron)`; otherwise, returns `Left(\"Patron is out of tickets\")`.","ref":"Examples.RideMonadOperator.html#check_ticket_availability/1"},{"type":"function","title":"Examples - Examples.RideMonadOperator.check_ticket_availability/1","doc":"iex> patron = Examples.RideMonadOperator.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonadOperator.check_ticket_availability(patron)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> patron = Examples.RideMonadOperator.register_patron(\"Ticketless\", 180, 0)\n    iex> Examples.RideMonadOperator.check_ticket_availability(patron)\n    %Monex.Either.Left{value: \"Patron is out of tickets\"}","ref":"Examples.RideMonadOperator.html#check_ticket_availability/1-examples"},{"type":"function","title":"Examples.RideMonadOperator.check_valid_height/1","doc":"Checks if the patron’s height is valid (between 150 and 200 cm) using the `Either` monad.\nIf valid, returns `Right(patron)`; otherwise, returns `Left(\"Patron's height is not valid\")`.","ref":"Examples.RideMonadOperator.html#check_valid_height/1"},{"type":"function","title":"Examples - Examples.RideMonadOperator.check_valid_height/1","doc":"iex> patron = Examples.RideMonadOperator.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonadOperator.check_valid_height(patron)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> patron = Examples.RideMonadOperator.register_patron(\"Shorty\", 140, 1)\n    iex> Examples.RideMonadOperator.check_valid_height(patron)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonadOperator.html#check_valid_height/1-examples"},{"type":"function","title":"Examples.RideMonadOperator.register_patron/3","doc":"Registers a new patron with the given name, height, and number of tickets, returning the result wrapped in the `Either` monad.","ref":"Examples.RideMonadOperator.html#register_patron/3"},{"type":"function","title":"Examples - Examples.RideMonadOperator.register_patron/3","doc":"iex> patron = Examples.RideMonadOperator.register_patron(\"John\", 170, 2)\n    %Monex.Either.Right{value: %Examples.Patron{name: \"John\", height: 170, tickets: 2}}","ref":"Examples.RideMonadOperator.html#register_patron/3-examples"},{"type":"function","title":"Examples.RideMonadOperator.take_ride/1","doc":"Chains together height and ticket validations, and if both pass, decrements the patron's ticket count using monadic operators.\n\nThis function uses the `~>>` operator to bind successive validations, and the `~>` operator to apply a function that decrements the ticket count.","ref":"Examples.RideMonadOperator.html#take_ride/1"},{"type":"function","title":"Examples - Examples.RideMonadOperator.take_ride/1","doc":"iex> patron = Examples.RideMonadOperator.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonadOperator.take_ride(patron)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 1}}\n\n    iex> patron = Examples.RideMonadOperator.register_patron(\"Shorty\", 140, 2)\n    iex> Examples.RideMonadOperator.take_ride(patron)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonadOperator.html#take_ride/1-examples"},{"type":"type","title":"Examples.RideMonadOperator.either_t/0","doc":"","ref":"Examples.RideMonadOperator.html#t:either_t/0"},{"type":"module","title":"Examples.RideMonadValidation","doc":"The `Examples.RideMonadValidation` module demonstrates how to manage ride operations using the `Either` monad from the `Monex` library,\nwith a focus on validating multiple conditions for a patron before allowing them to take a ride.\n\nThis module showcases how to:\n- Use `Either.validate/2` to validate multiple conditions in a single step.\n- Chain monadic operations using functions like `bind/2`, `map/2`, and `ap/2`.\n- Handle errors (via `Left`) when validation fails, ensuring that only patrons with valid height and ticket availability can take a ride.\n\nThe validation approach simplifies the checking of multiple conditions, making the code cleaner and easier to read.","ref":"Examples.RideMonadValidation.html"},{"type":"module","title":"Key Functions: - Examples.RideMonadValidation","doc":"- `register_patron/3`: Registers a new patron, wrapping them in the `Either` monad.\n- `check_valid_height/1`: Validates a patron’s height.\n- `check_ticket_availability/1`: Checks if the patron has enough tickets.\n- `validate_patron/1`: Validates both height and ticket availability using `Either.validate/2`.\n- `take_ride/1`: Chains the validation and ticket deduction using monadic operations.\n- `add_ticket/1`: Adds a ticket to the patron using function application in the monad.","ref":"Examples.RideMonadValidation.html#module-key-functions"},{"type":"function","title":"Examples.RideMonadValidation.add_ticket/1","doc":"Adds a ticket to the patron using function application in the `Either` monad.","ref":"Examples.RideMonadValidation.html#add_ticket/1"},{"type":"function","title":"Examples - Examples.RideMonadValidation.add_ticket/1","doc":"iex> patron = Examples.RideMonadValidation.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonadValidation.add_ticket(patron)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 3}}","ref":"Examples.RideMonadValidation.html#add_ticket/1-examples"},{"type":"function","title":"Examples.RideMonadValidation.check_ticket_availability/1","doc":"Checks if the patron has enough tickets (at least 1). If the patron has tickets, returns `Right(patron)`; otherwise, returns `Left(\"Patron is out of tickets\")`.","ref":"Examples.RideMonadValidation.html#check_ticket_availability/1"},{"type":"function","title":"Examples - Examples.RideMonadValidation.check_ticket_availability/1","doc":"iex> patron = Examples.RideMonadValidation.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonadValidation.check_ticket_availability(patron)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> patron = Examples.RideMonadValidation.register_patron(\"Ticketless\", 180, 0)\n    iex> Examples.RideMonadValidation.check_ticket_availability(patron)\n    %Monex.Either.Left{value: \"Patron is out of tickets\"}","ref":"Examples.RideMonadValidation.html#check_ticket_availability/1-examples"},{"type":"function","title":"Examples.RideMonadValidation.check_valid_height/1","doc":"Checks if the patron’s height is valid (between 150 and 200 cm). If valid, returns `Right(patron)`; otherwise, returns `Left(\"Patron's height is not valid\")`.","ref":"Examples.RideMonadValidation.html#check_valid_height/1"},{"type":"function","title":"Examples - Examples.RideMonadValidation.check_valid_height/1","doc":"iex> patron = Examples.RideMonadValidation.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonadValidation.check_valid_height(patron)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> patron = Examples.RideMonadValidation.register_patron(\"Shorty\", 140, 1)\n    iex> Examples.RideMonadValidation.check_valid_height(patron)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonadValidation.html#check_valid_height/1-examples"},{"type":"function","title":"Examples.RideMonadValidation.register_patron/3","doc":"Registers a new patron with the given name, height, and number of tickets, returning the result wrapped in the `Either` monad.","ref":"Examples.RideMonadValidation.html#register_patron/3"},{"type":"function","title":"Examples - Examples.RideMonadValidation.register_patron/3","doc":"iex> patron = Examples.RideMonadValidation.register_patron(\"John\", 170, 2)\n    %Monex.Either.Right{value: %Examples.Patron{name: \"John\", height: 170, tickets: 2}}","ref":"Examples.RideMonadValidation.html#register_patron/3-examples"},{"type":"function","title":"Examples.RideMonadValidation.take_ride/1","doc":"Validates the patron and, if successful, decrements the number of tickets they have. If validation fails, returns the `Left` value with the appropriate error message.","ref":"Examples.RideMonadValidation.html#take_ride/1"},{"type":"function","title":"Examples - Examples.RideMonadValidation.take_ride/1","doc":"iex> patron = Examples.RideMonadValidation.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonadValidation.take_ride(patron)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 1}}\n\n    iex> patron = Examples.RideMonadValidation.register_patron(\"Shorty\", 140, 2)\n    iex> Examples.RideMonadValidation.take_ride(patron)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonadValidation.html#take_ride/1-examples"},{"type":"function","title":"Examples.RideMonadValidation.validate_patron/1","doc":"Validates that the patron meets all conditions (valid height and ticket availability) using `Either.validate/2`.\nIf all conditions pass, it returns `Right(patron)`; otherwise, returns `Left` with the appropriate validation error.\n\nThis function demonstrates the use of `Either.validate/2` to combine multiple validation functions.","ref":"Examples.RideMonadValidation.html#validate_patron/1"},{"type":"function","title":"Examples - Examples.RideMonadValidation.validate_patron/1","doc":"iex> patron = Examples.RideMonadValidation.register_patron(\"John\", 170, 2)\n    iex> Examples.RideMonadValidation.validate_patron(patron)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> patron = Examples.RideMonadValidation.register_patron(\"Shorty\", 140, 1)\n    iex> Examples.RideMonadValidation.validate_patron(patron)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonadValidation.html#validate_patron/1-examples"},{"type":"type","title":"Examples.RideMonadValidation.either_t/0","doc":"","ref":"Examples.RideMonadValidation.html#t:either_t/0"},{"type":"module","title":"Examples.RideMonadValidationAsync","doc":"The `Examples.RideMonadValidationAsync` module demonstrates how to manage ride operations using the `LazyTaskEither` monad from the `Monex` library,\nwith a focus on asynchronous validation. This module introduces how to handle deferred computations and validate multiple conditions asynchronously.\n\nThis module showcases:\n- Using `LazyTaskEither` to handle asynchronous tasks like validating height or ticket availability.\n- Combining multiple asynchronous validations with `LazyTaskEither.validate/2`.\n- Chaining monadic operations using `bind/2`, `map/2`, and `ap/2`.\n- Simulating asynchronous delays with `:timer.sleep/1` to represent real-world async operations.","ref":"Examples.RideMonadValidationAsync.html"},{"type":"module","title":"Key Functions: - Examples.RideMonadValidationAsync","doc":"- `register_patron/3`: Registers a new patron and wraps them in the `LazyTaskEither` monad for asynchronous operations.\n- `check_valid_height/1`: Asynchronously validates a patron’s height.\n- `check_ticket_availability/1`: Asynchronously checks if the patron has enough tickets.\n- `validate_patron/1`: Validates both height and ticket availability asynchronously using `LazyTaskEither.validate/2`.\n- `take_ride/1`: Chains the validation and ticket deduction using monadic operations.\n- `add_ticket/1`: Adds a ticket to the patron using function application in the monad.","ref":"Examples.RideMonadValidationAsync.html#module-key-functions"},{"type":"function","title":"Examples.RideMonadValidationAsync.add_ticket/1","doc":"Adds a ticket to the patron asynchronously using function application in the `LazyTaskEither` monad.","ref":"Examples.RideMonadValidationAsync.html#add_ticket/1"},{"type":"function","title":"Examples - Examples.RideMonadValidationAsync.add_ticket/1","doc":"iex> task = Examples.RideMonadValidationAsync.register_patron(\"John\", 170, 2)\n    iex> task = Examples.RideMonadValidationAsync.add_ticket(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 3}}","ref":"Examples.RideMonadValidationAsync.html#add_ticket/1-examples"},{"type":"function","title":"Examples.RideMonadValidationAsync.check_ticket_availability/1","doc":"Asynchronously checks if the patron has enough tickets (at least 1). If the patron has tickets, returns `Right(patron)`; otherwise, returns `Left(\"Patron is out of tickets\")`.\n\nThis function simulates an asynchronous check with a 2-second delay using `:timer.sleep/1`.","ref":"Examples.RideMonadValidationAsync.html#check_ticket_availability/1"},{"type":"function","title":"Examples - Examples.RideMonadValidationAsync.check_ticket_availability/1","doc":"iex> task = Examples.RideMonadValidationAsync.register_patron(\"John\", 170, 2)\n    iex> task = Examples.RideMonadValidationAsync.check_ticket_availability(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> task = Examples.RideMonadValidationAsync.register_patron(\"Ticketless\", 180, 0)\n    iex> task = Examples.RideMonadValidationAsync.check_ticket_availability(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Left{value: \"Patron is out of tickets\"}","ref":"Examples.RideMonadValidationAsync.html#check_ticket_availability/1-examples"},{"type":"function","title":"Examples.RideMonadValidationAsync.check_valid_height/1","doc":"Asynchronously checks if the patron’s height is valid (between 150 and 200 cm). If valid, returns `Right(patron)`; otherwise, returns `Left(\"Patron's height is not valid\")`.\n\nThis function simulates an asynchronous check with a 2-second delay using `:timer.sleep/1`.","ref":"Examples.RideMonadValidationAsync.html#check_valid_height/1"},{"type":"function","title":"Examples - Examples.RideMonadValidationAsync.check_valid_height/1","doc":"iex> task = Examples.RideMonadValidationAsync.register_patron(\"John\", 170, 2)\n    iex> task = Examples.RideMonadValidationAsync.check_valid_height(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> task = Examples.RideMonadValidationAsync.register_patron(\"Shorty\", 140, 1)\n    iex> task = Examples.RideMonadValidationAsync.check_valid_height(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonadValidationAsync.html#check_valid_height/1-examples"},{"type":"function","title":"Examples.RideMonadValidationAsync.register_patron/3","doc":"Registers a new patron with the given name, height, and number of tickets, returning the result wrapped in the `LazyTaskEither` monad.","ref":"Examples.RideMonadValidationAsync.html#register_patron/3"},{"type":"function","title":"Examples - Examples.RideMonadValidationAsync.register_patron/3","doc":"iex> task = Examples.RideMonadValidationAsync.register_patron(\"John\", 170, 2)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{name: \"John\", height: 170, tickets: 2}}","ref":"Examples.RideMonadValidationAsync.html#register_patron/3-examples"},{"type":"function","title":"Examples.RideMonadValidationAsync.take_ride/1","doc":"Validates the patron asynchronously and, if successful, decrements the number of tickets they have. If validation fails, returns the `Left` value with the appropriate error message.","ref":"Examples.RideMonadValidationAsync.html#take_ride/1"},{"type":"function","title":"Examples - Examples.RideMonadValidationAsync.take_ride/1","doc":"iex> task = Examples.RideMonadValidationAsync.register_patron(\"John\", 170, 2)\n    iex> task = Examples.RideMonadValidationAsync.take_ride(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{tickets: 1}}\n\n    iex> task = Examples.RideMonadValidationAsync.register_patron(\"Shorty\", 140, 2)\n    iex> task = Examples.RideMonadValidationAsync.take_ride(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonadValidationAsync.html#take_ride/1-examples"},{"type":"function","title":"Examples.RideMonadValidationAsync.validate_patron/1","doc":"Validates that the patron meets all conditions (valid height and ticket availability) asynchronously using `LazyTaskEither.validate/2`.\nIf all conditions pass, it returns `Right(patron)`; otherwise, returns `Left` with the appropriate validation error.","ref":"Examples.RideMonadValidationAsync.html#validate_patron/1"},{"type":"function","title":"Examples - Examples.RideMonadValidationAsync.validate_patron/1","doc":"iex> task = Examples.RideMonadValidationAsync.register_patron(\"John\", 170, 2)\n    iex> task = Examples.RideMonadValidationAsync.validate_patron(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Right{value: %Examples.Patron{...}}\n\n    iex> task = Examples.RideMonadValidationAsync.register_patron(\"Shorty\", 140, 1)\n    iex> task = Examples.RideMonadValidationAsync.validate_patron(task)\n    iex> Monex.LazyTaskEither.run(task)\n    %Monex.Either.Left{value: \"Patron's height is not valid\"}","ref":"Examples.RideMonadValidationAsync.html#validate_patron/1-examples"},{"type":"type","title":"Examples.RideMonadValidationAsync.task_either_t/0","doc":"","ref":"Examples.RideMonadValidationAsync.html#t:task_either_t/0"},{"type":"module","title":"Monex.Either","doc":"The `Monex.Either` module provides an implementation of the `Either` monad, which represents values that can either be `Right` (success) or `Left` (error).","ref":"Monex.Either.html"},{"type":"module","title":"Constructors - Monex.Either","doc":"- `right/1`: Wraps a value in the `Right` monad.\n  - `left/1`: Wraps a value in the `Left` monad.\n  - `pure/1`: Alias for `right/1`.","ref":"Monex.Either.html#module-constructors"},{"type":"module","title":"Refinements - Monex.Either","doc":"- `right?/1`: Checks if an `Either` value is `Right`.\n  - `left?/1`: Checks if an `Either` value is `Left`.","ref":"Monex.Either.html#module-refinements"},{"type":"module","title":"Matching & Filtering - Monex.Either","doc":"- `filter_or_else/3`: Filters the value inside a `Right` and returns a `Left` on failure.\n  - `get_or_else/2`: Retrieves the value from a `Right`, returning a default if `Left`.","ref":"Monex.Either.html#module-matching-filtering"},{"type":"module","title":"Comparison - Monex.Either","doc":"- `get_eq/1`: Returns a custom equality function for `Either` values.\n  - `get_ord/1`: Returns a custom ordering function for `Either` values.","ref":"Monex.Either.html#module-comparison"},{"type":"module","title":"Sequencing - Monex.Either","doc":"- `sequence/1`: Sequences a list of `Either` values.\n  - `traverse/2`: Applies a function to a list and sequences the result.\n  - `sequence_a/1`: Sequences a list of `Either` values, collecting errors from `Left` values.","ref":"Monex.Either.html#module-sequencing"},{"type":"module","title":"Validation - Monex.Either","doc":"- `validate/2`: Validates a value using a list of validators, collecting errors from `Left` values.","ref":"Monex.Either.html#module-validation"},{"type":"module","title":"Lifts - Monex.Either","doc":"- `lift_option/2`: Lifts a `Maybe` value to an `Either` monad.\n  - `lift_predicate/3`: Lifts a value into an `Either` based on a predicate.","ref":"Monex.Either.html#module-lifts"},{"type":"module","title":"Elixir Interops - Monex.Either","doc":"- `from_result/1`: Converts a result (`{:ok, _}` or `{:error, _}`) to an `Either`.\n  - `to_result/1`: Converts an `Either` to a result (`{:ok, value}` or `{:error, reason}`).\n  - `from_try/1`: Wraps a value in an `Either`, catching exceptions.\n  - `to_try!/1`: Converts an `Either` to its value or raises an exception if `Left`.","ref":"Monex.Either.html#module-elixir-interops"},{"type":"function","title":"Monex.Either.filter_or_else/3","doc":"Filters the value inside a `Right` using the given `predicate`. If the predicate returns `false`,\na `Left` is returned using the `error_func`.","ref":"Monex.Either.html#filter_or_else/3"},{"type":"function","title":"Examples - Monex.Either.filter_or_else/3","doc":"iex> Monex.Either.filter_or_else(Monex.Either.right(5), fn x -> x > 3 end, fn -> \"error\" end)\n    %Monex.Either.Right{value: 5}\n\n    iex> Monex.Either.filter_or_else(Monex.Either.right(2), fn x -> x > 3 end, fn -> \"error\" end)\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.Either.html#filter_or_else/3-examples"},{"type":"function","title":"Monex.Either.from_result/1","doc":"Converts a result (`{:ok, _}` or `{:error, _}`) to an `Either`.","ref":"Monex.Either.html#from_result/1"},{"type":"function","title":"Examples - Monex.Either.from_result/1","doc":"iex> Monex.Either.from_result({:ok, 5})\n    %Monex.Either.Right{value: 5}\n\n    iex> Monex.Either.from_result({:error, \"error\"})\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.Either.html#from_result/1-examples"},{"type":"function","title":"Monex.Either.from_try/1","doc":"Wraps a value in an `Either`, catching any exceptions. If an exception occurs, a `Left` is returned with the exception.","ref":"Monex.Either.html#from_try/1"},{"type":"function","title":"Examples - Monex.Either.from_try/1","doc":"iex> Monex.Either.from_try(fn -> 5 end)\n    %Monex.Either.Right{value: 5}\n\n    iex> Monex.Either.from_try(fn -> raise \"error\" end)\n    %Monex.Either.Left{value: %RuntimeError{message: \"error\"}}","ref":"Monex.Either.html#from_try/1-examples"},{"type":"function","title":"Monex.Either.get_eq/1","doc":"Creates a custom equality function for `Either` values using the provided `custom_eq`.","ref":"Monex.Either.html#get_eq/1"},{"type":"function","title":"Examples - Monex.Either.get_eq/1","doc":"iex> eq = Monex.Either.get_eq(%{equals?: fn x, y -> x == y end})\n    iex> eq.equals?.(Monex.Either.right(5), Monex.Either.right(5))\n    true\n\n    iex> eq.equals?.(Monex.Either.right(5), Monex.Either.left(\"error\"))\n    false","ref":"Monex.Either.html#get_eq/1-examples"},{"type":"function","title":"Monex.Either.get_or_else/2","doc":"Retrieves the value from a `Right`, returning the `default` value if `Left`.","ref":"Monex.Either.html#get_or_else/2"},{"type":"function","title":"Examples - Monex.Either.get_or_else/2","doc":"iex> Monex.Either.get_or_else(Monex.Either.right(5), 0)\n    5\n\n    iex> Monex.Either.get_or_else(Monex.Either.left(\"error\"), 0)\n    0","ref":"Monex.Either.html#get_or_else/2-examples"},{"type":"function","title":"Monex.Either.get_ord/1","doc":"Creates a custom ordering function for `Either` values using the provided `custom_ord`.","ref":"Monex.Either.html#get_ord/1"},{"type":"function","title":"Examples - Monex.Either.get_ord/1","doc":"iex> ord = Monex.Either.get_ord(%{lt?: fn x, y -> x   ord.lt?.(Monex.Either.right(3), Monex.Either.right(5))\n    true","ref":"Monex.Either.html#get_ord/1-examples"},{"type":"function","title":"Monex.Either.left/1","doc":"Wraps a value in the `Left` monad.","ref":"Monex.Either.html#left/1"},{"type":"function","title":"Examples - Monex.Either.left/1","doc":"iex> Monex.Either.left(\"error\")\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.Either.html#left/1-examples"},{"type":"function","title":"Monex.Either.left?/1","doc":"Returns `true` if the `Either` is a `Left` value.","ref":"Monex.Either.html#left?/1"},{"type":"function","title":"Examples - Monex.Either.left?/1","doc":"iex> Monex.Either.left?(Monex.Either.left(\"error\"))\n    true\n\n    iex> Monex.Either.left?(Monex.Either.right(5))\n    false","ref":"Monex.Either.html#left?/1-examples"},{"type":"function","title":"Monex.Either.lift_option/2","doc":"Converts a `Maybe` value to an `Either`. If the `Maybe` is `Nothing`, a `Left` is returned using `on_none`.","ref":"Monex.Either.html#lift_option/2"},{"type":"function","title":"Examples - Monex.Either.lift_option/2","doc":"iex> Monex.Either.lift_option(Monex.Maybe.just(5), fn -> \"error\" end)\n    %Monex.Either.Right{value: 5}\n\n    iex> Monex.Either.lift_option(Monex.Maybe.nothing(), fn -> \"error\" end)\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.Either.html#lift_option/2-examples"},{"type":"function","title":"Monex.Either.lift_predicate/3","doc":"Lifts a value into an `Either` based on the result of a predicate.","ref":"Monex.Either.html#lift_predicate/3"},{"type":"function","title":"Examples - Monex.Either.lift_predicate/3","doc":"iex> Monex.Either.lift_predicate(5, fn x -> x > 3 end, fn -> \"too small\" end)\n    %Monex.Either.Right{value: 5}\n\n    iex> Monex.Either.lift_predicate(2, fn x -> x > 3 end, fn -> \"too small\" end)\n    %Monex.Either.Left{value: \"too small\"}","ref":"Monex.Either.html#lift_predicate/3-examples"},{"type":"function","title":"Monex.Either.pure/1","doc":"Alias for `right/1`.","ref":"Monex.Either.html#pure/1"},{"type":"function","title":"Monex.Either.right/1","doc":"Wraps a value in the `Right` monad.","ref":"Monex.Either.html#right/1"},{"type":"function","title":"Examples - Monex.Either.right/1","doc":"iex> Monex.Either.right(5)\n    %Monex.Either.Right{value: 5}","ref":"Monex.Either.html#right/1-examples"},{"type":"function","title":"Monex.Either.right?/1","doc":"Returns `true` if the `Either` is a `Right` value.","ref":"Monex.Either.html#right?/1"},{"type":"function","title":"Examples - Monex.Either.right?/1","doc":"iex> Monex.Either.right?(Monex.Either.right(5))\n    true\n\n    iex> Monex.Either.right?(Monex.Either.left(\"error\"))\n    false","ref":"Monex.Either.html#right?/1-examples"},{"type":"function","title":"Monex.Either.sequence/1","doc":"Sequences a list of `Either` values into an `Either` of a list.","ref":"Monex.Either.html#sequence/1"},{"type":"function","title":"Examples - Monex.Either.sequence/1","doc":"iex> Monex.Either.sequence([Monex.Either.right(1), Monex.Either.right(2)])\n    %Monex.Either.Right{value: [1, 2]}\n\n    iex> Monex.Either.sequence([Monex.Either.right(1), Monex.Either.left(\"error\")])\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.Either.html#sequence/1-examples"},{"type":"function","title":"Monex.Either.sequence_a/1","doc":"Sequences a list of `Either` values, collecting all errors from `Left` values, rather than short-circuiting.","ref":"Monex.Either.html#sequence_a/1"},{"type":"function","title":"Examples - Monex.Either.sequence_a/1","doc":"iex> Monex.Either.sequence_a([Monex.Either.right(1), Monex.Either.left(\"error\"), Monex.Either.left(\"another error\")])\n    %Monex.Either.Left{value: [\"error\", \"another error\"]}","ref":"Monex.Either.html#sequence_a/1-examples"},{"type":"function","title":"Monex.Either.to_result/1","doc":"Converts an `Either` to a result (`{:ok, value}` or `{:error, reason}`).","ref":"Monex.Either.html#to_result/1"},{"type":"function","title":"Examples - Monex.Either.to_result/1","doc":"iex> Monex.Either.to_result(Monex.Either.right(5))\n    {:ok, 5}\n\n    iex> Monex.Either.to_result(Monex.Either.left(\"error\"))\n    {:error, \"error\"}","ref":"Monex.Either.html#to_result/1-examples"},{"type":"function","title":"Monex.Either.to_try!/1","doc":"Converts an `Either` to its wrapped value, raising an exception if it is `Left`.","ref":"Monex.Either.html#to_try!/1"},{"type":"function","title":"Examples - Monex.Either.to_try!/1","doc":"iex> Monex.Either.to_try!(Monex.Either.right(5))\n    5\n\n    iex> Monex.Either.to_try!(Monex.Either.left(\"error\"))\n    ** (RuntimeError) error","ref":"Monex.Either.html#to_try!/1-examples"},{"type":"function","title":"Monex.Either.traverse/2","doc":"Applies a function to each element of a list and sequences the result.","ref":"Monex.Either.html#traverse/2"},{"type":"function","title":"Examples - Monex.Either.traverse/2","doc":"iex> Monex.Either.traverse(fn x -> Monex.Either.right(x * 2) end, [1, 2])\n    %Monex.Either.Right{value: [2, 4]}","ref":"Monex.Either.html#traverse/2-examples"},{"type":"function","title":"Monex.Either.validate/2","doc":"Validates a value using a list of validators. If any validator returns a `Left`, the errors are collected.","ref":"Monex.Either.html#validate/2"},{"type":"function","title":"Examples - Monex.Either.validate/2","doc":"iex> Monex.Either.validate(5, [fn x -> if x > 3, do: Monex.Either.right(x), else: Monex.Either.left(\"too small\") end])\n    %Monex.Either.Right{value: 5}\n\n    iex> Monex.Either.validate(2, [fn x -> if x > 3, do: Monex.Either.right(x), else: Monex.Either.left(\"too small\") end])\n    %Monex.Either.Left{value: [\"too small\"]}","ref":"Monex.Either.html#validate/2-examples"},{"type":"type","title":"Monex.Either.t/2","doc":"","ref":"Monex.Either.html#t:t/2"},{"type":"module","title":"Monex.Either.Left","doc":"Represents the `Left` variant of the `Either` monad, used to model an error or failure.\n\nThis module implements the following protocols:\n  - `Monex.Monad`: Implements the `bind/2`, `map/2`, and `ap/2` functions for monadic operations.\n  - `Monex.Foldable`: Provides `fold_l/3` and `fold_r/3` to handle folding for `Left` values.\n  - `Monex.Eq`: Defines equality checks between `Left` and other `Either` values.\n  - `Monex.Ord`: Defines ordering logic for `Left` and `Right` values.\n\nThe `Left` monad propagates the wrapped error through operations without executing the success logic.","ref":"Monex.Either.Left.html"},{"type":"function","title":"Monex.Either.Left.pure/1","doc":"Creates a new `Left` value.\n\nThe `pure/1` function wraps a value in the `Left` monad, representing an error or failure.","ref":"Monex.Either.Left.html#pure/1"},{"type":"function","title":"Examples - Monex.Either.Left.pure/1","doc":"iex> Monex.Either.Left.pure(\"error\")\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.Either.Left.html#pure/1-examples"},{"type":"type","title":"Monex.Either.Left.t/1","doc":"","ref":"Monex.Either.Left.html#t:t/1"},{"type":"module","title":"Monex.Either.Right","doc":"Represents the `Right` variant of the `Either` monad, used to model a success or valid result.\n\nThis module implements the following protocols:\n  - `Monex.Monad`: Implements the `bind/2`, `map/2`, and `ap/2` functions for monadic operations.\n  - `Monex.Foldable`: Provides `fold_l/3` and `fold_r/3` to handle folding for `Right` values.\n  - `Monex.Eq`: Defines equality checks between `Right` and other `Either` values.\n  - `Monex.Ord`: Defines ordering logic for `Right` and `Left` values.\n\nThe `Right` monad represents a valid result, and the contained value is propagated through operations.","ref":"Monex.Either.Right.html"},{"type":"function","title":"Monex.Either.Right.pure/1","doc":"Creates a new `Right` value.\n\nThe `pure/1` function wraps a value in the `Right` monad, representing a valid result.","ref":"Monex.Either.Right.html#pure/1"},{"type":"function","title":"Examples - Monex.Either.Right.pure/1","doc":"iex> Monex.Either.Right.pure(5)\n    %Monex.Either.Right{value: 5}","ref":"Monex.Either.Right.html#pure/1-examples"},{"type":"type","title":"Monex.Either.Right.t/1","doc":"","ref":"Monex.Either.Right.html#t:t/1"},{"type":"protocol","title":"Monex.Eq","doc":"The `Monex.Eq` protocol defines an equality function, `equals?/2`, for comparing two values.\n\nTypes that implement this protocol can define custom equality logic for comparing instances of their type.","ref":"Monex.Eq.html"},{"type":"protocol","title":"Fallback - Monex.Eq","doc":"The protocol uses `@fallback_to_any true`, meaning that if a specific type does not implement `Monex.Eq`,\nit falls back to the default implementation for `Any`, which uses Elixir's built-in equality operator (`==`).","ref":"Monex.Eq.html#module-fallback"},{"type":"function","title":"Monex.Eq.equals?/2","doc":"Returns `true` if `a` is equal to `b`, otherwise returns `false`.","ref":"Monex.Eq.html#equals?/2"},{"type":"function","title":"Examples - Monex.Eq.equals?/2","doc":"iex> Monex.Eq.equals?(Monex.Maybe.just(3), Monex.Maybe.just(3))\n    true\n\n    iex> Monex.Eq.equals?(Monex.Maybe.just(3), Monex.Maybe.just(5))\n    false\n\n    iex> Monex.Eq.equals?(Monex.Maybe.nothing(), Monex.Maybe.nothing())\n    true\n\n    iex> Monex.Eq.equals?(Monex.Maybe.nothing(), Monex.Maybe.just(5))\n    false","ref":"Monex.Eq.html#equals?/2-examples"},{"type":"type","title":"Monex.Eq.t/0","doc":"All the types that implement this protocol.","ref":"Monex.Eq.html#t:t/0"},{"type":"protocol","title":"Monex.Foldable","doc":"The `Monex.Foldable` protocol defines two core folding operations: `fold_l/3` (fold left) and `fold_r/3` (fold right).\n\nThese functions allow structures to be collapsed into a single value by applying functions in a specific order.\nDepending on the structure, folding can be done from the left (`fold_l/3`) or from the right (`fold_r/3`).","ref":"Monex.Foldable.html"},{"type":"function","title":"Monex.Foldable.fold_l/3","doc":"Folds the structure from the left, applying `func_a` if a condition is met, otherwise applying `func_b`.\n\nThis function collapses a structure by recursively applying the provided functions from the leftmost element to the rightmost.","ref":"Monex.Foldable.html#fold_l/3"},{"type":"function","title":"Parameters: - Monex.Foldable.fold_l/3","doc":"- `structure`: The structure to fold.\n- `func_a`: The function to apply in case of a matching condition.\n- `func_b`: The function to apply if the condition is not met.","ref":"Monex.Foldable.html#fold_l/3-parameters"},{"type":"function","title":"Examples - Monex.Foldable.fold_l/3","doc":"iex> Monex.Foldable.fold_l(Monex.Maybe.just(5), fn x -> x + 1 end, fn -> 0 end)\n    6\n\n    iex> Monex.Foldable.fold_l(Monex.Maybe.nothing(), fn _ -> 1 end, fn -> 0 end)\n    0","ref":"Monex.Foldable.html#fold_l/3-examples"},{"type":"function","title":"Monex.Foldable.fold_r/3","doc":"Folds the structure from the right, applying `func_a` if a condition is met, otherwise applying `func_b`.\n\nThis function collapses a structure by recursively applying the provided functions from the rightmost element to the leftmost.","ref":"Monex.Foldable.html#fold_r/3"},{"type":"function","title":"Parameters: - Monex.Foldable.fold_r/3","doc":"- `structure`: The structure to fold.\n- `func_a`: The function to apply in case of a matching condition.\n- `func_b`: The function to apply if the condition is not met.","ref":"Monex.Foldable.html#fold_r/3-parameters"},{"type":"function","title":"Examples - Monex.Foldable.fold_r/3","doc":"iex> Monex.Foldable.fold_r(Monex.Maybe.just(5), fn x -> x + 1 end, fn -> 0 end)\n    6\n\n    iex> Monex.Foldable.fold_r(Monex.Maybe.nothing(), fn _ -> 1 end, fn -> 0 end)\n    0","ref":"Monex.Foldable.html#fold_r/3-examples"},{"type":"type","title":"Monex.Foldable.t/0","doc":"All the types that implement this protocol.","ref":"Monex.Foldable.html#t:t/0"},{"type":"module","title":"Monex.Identity","doc":"The `Monex.Identity` module represents the identity monad, where values are simply wrapped in a structure\nand operations are applied directly to those values.\n\nThis module implements the following protocols:\n  - `Monex.Monad`: Implements the `bind/2`, `map/2`, and `ap/2` functions for monadic operations.\n  - `Monex.Eq`: Defines equality checks for `Identity` values.\n  - `Monex.Ord`: Defines ordering logic for `Identity` values.\n  - `String.Chars`: Converts an `Identity` value into a string representation.\n\nThe `Identity` monad provides a way to wrap a value in a minimal context and perform monadic operations.","ref":"Monex.Identity.html"},{"type":"function","title":"Monex.Identity.extract/1","doc":"Extracts the value from an `Identity`.","ref":"Monex.Identity.html#extract/1"},{"type":"function","title":"Examples - Monex.Identity.extract/1","doc":"iex> Monex.Identity.extract(Monex.Identity.pure(5))\n    5","ref":"Monex.Identity.html#extract/1-examples"},{"type":"function","title":"Monex.Identity.get_eq/1","doc":"","ref":"Monex.Identity.html#get_eq/1"},{"type":"function","title":"Monex.Identity.get_ord/1","doc":"","ref":"Monex.Identity.html#get_ord/1"},{"type":"function","title":"Monex.Identity.pure/1","doc":"Creates a new `Identity` value by wrapping a given value.","ref":"Monex.Identity.html#pure/1"},{"type":"function","title":"Examples - Monex.Identity.pure/1","doc":"iex> Monex.Identity.pure(5)\n    %Monex.Identity{value: 5}","ref":"Monex.Identity.html#pure/1-examples"},{"type":"type","title":"Monex.Identity.t/1","doc":"","ref":"Monex.Identity.html#t:t/1"},{"type":"module","title":"Monex.LazyTask","doc":"The `Monex.LazyTask` module provides an implementation of a lazily evaluated task monad.\nThis monad allows for deferred execution of tasks, wrapping a function that can be executed asynchronously and awaited later.\n\nThe `LazyTask` monad supports mapping, binding, and function application on asynchronous computations.","ref":"Monex.LazyTask.html"},{"type":"function","title":"Monex.LazyTask.pure/1","doc":"Creates a `LazyTask` that wraps a value, returning a task that, when run, resolves to that value.","ref":"Monex.LazyTask.html#pure/1"},{"type":"function","title":"Examples - Monex.LazyTask.pure/1","doc":"iex> task = Monex.LazyTask.pure(42)\n    iex> Monex.LazyTask.run(task)\n    42","ref":"Monex.LazyTask.html#pure/1-examples"},{"type":"function","title":"Monex.LazyTask.run/1","doc":"Runs the `LazyTask`, awaiting the task and returning its resolved value.","ref":"Monex.LazyTask.html#run/1"},{"type":"function","title":"Examples - Monex.LazyTask.run/1","doc":"iex> task = Monex.LazyTask.pure(42)\n    iex> Monex.LazyTask.run(task)\n    42","ref":"Monex.LazyTask.html#run/1-examples"},{"type":"type","title":"Monex.LazyTask.t/1","doc":"","ref":"Monex.LazyTask.html#t:t/1"},{"type":"module","title":"Monex.LazyTaskEither","doc":"The `Monex.LazyTaskEither` module provides an implementation of the `LazyTaskEither` monad, which represents asynchronous computations that can either be `Right` (success) or `Left` (failure).\n\n`LazyTaskEither` defers the execution of a task until it is explicitly awaited, making it useful for handling asynchronous tasks that may succeed or fail.","ref":"Monex.LazyTaskEither.html"},{"type":"module","title":"Constructors - Monex.LazyTaskEither","doc":"- `right/1`: Wraps a value in the `Right` monad.\n  - `left/1`: Wraps a value in the `Left` monad.\n  - `pure/1`: Alias for `right/1`.","ref":"Monex.LazyTaskEither.html#module-constructors"},{"type":"module","title":"Execution - Monex.LazyTaskEither","doc":"- `run/1`: Executes the deferred task inside the `LazyTaskEither` monad and returns its result (`Right` or `Left`).","ref":"Monex.LazyTaskEither.html#module-execution"},{"type":"module","title":"Sequencing - Monex.LazyTaskEither","doc":"- `sequence/1`: Sequences a list of `LazyTaskEither` values, returning a list of `Right` values or the first `Left`.\n  - `traverse/2`: Traverses a list with a function that returns `LazyTaskEither` values, collecting the results into a single `LazyTaskEither`.\n  - `sequence_a/1`: Sequences a list of `LazyTaskEither` values, collecting all `Left` errors.","ref":"Monex.LazyTaskEither.html#module-sequencing"},{"type":"module","title":"Validation - Monex.LazyTaskEither","doc":"- `validate/2`: Validates a value using a list of validators, collecting errors from `Left` values.","ref":"Monex.LazyTaskEither.html#module-validation"},{"type":"module","title":"Lifts - Monex.LazyTaskEither","doc":"- `lift_either/1`: Lifts an `Either` value to a `LazyTaskEither` monad.\n  - `lift_option/2`: Lifts a `Maybe` value to a `LazyTaskEither` monad.\n  - `lift_predicate/3`: Lifts a value into a `LazyTaskEither` based on a predicate.","ref":"Monex.LazyTaskEither.html#module-lifts"},{"type":"module","title":"Elixir Interops - Monex.LazyTaskEither","doc":"- `from_result/1`: Converts a result (`{:ok, _}` or `{:error, _}`) to a `LazyTaskEither`.\n  - `to_result/1`: Converts a `LazyTaskEither` to a result (`{:ok, value}` or `{:error, reason}`).\n  - `from_try/1`: Wraps a function in a `LazyTaskEither`, catching exceptions.\n  - `to_try!/1`: Converts a `LazyTaskEither` to its value or raises an exception if `Left`.","ref":"Monex.LazyTaskEither.html#module-elixir-interops"},{"type":"function","title":"Monex.LazyTaskEither.from_result/1","doc":"Converts an Elixir `{:ok, value}` or `{:error, reason}` tuple into a `LazyTaskEither`.","ref":"Monex.LazyTaskEither.html#from_result/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.from_result/1","doc":"iex> result = Monex.LazyTaskEither.from_result({:ok, 42})\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: 42}\n\n    iex> result = Monex.LazyTaskEither.from_result({:error, \"error\"})\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.LazyTaskEither.html#from_result/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.from_try/1","doc":"Wraps a function in a `LazyTaskEither`, catching exceptions and wrapping them in a `Left`.","ref":"Monex.LazyTaskEither.html#from_try/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.from_try/1","doc":"iex> result = Monex.LazyTaskEither.from_try(fn -> 42 end)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: 42}\n\n    iex> result = Monex.LazyTaskEither.from_try(fn -> raise \"error\" end)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: %RuntimeError{message: \"error\"}}","ref":"Monex.LazyTaskEither.html#from_try/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.left/1","doc":"Wraps a value in the `Left` monad, representing a failed computation.","ref":"Monex.LazyTaskEither.html#left/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.left/1","doc":"iex> result = Monex.LazyTaskEither.left(\"error\")\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.LazyTaskEither.html#left/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.lift_either/1","doc":"Converts an `Either` value into a `LazyTaskEither` monad.","ref":"Monex.LazyTaskEither.html#lift_either/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.lift_either/1","doc":"iex> either = %Monex.Either.Right{value: 42}\n    iex> result = Monex.LazyTaskEither.lift_either(either)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: 42}\n\n    iex> either = %Monex.Either.Left{value: \"error\"}\n    iex> result = Monex.LazyTaskEither.lift_either(either)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.LazyTaskEither.html#lift_either/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.lift_option/2","doc":"Converts a `Maybe` value into a `LazyTaskEither` monad.\nIf the `Maybe` is `Just`, the value is wrapped in `Right`.\nIf it is `Nothing`, the value from `on_none` is wrapped in `Left`.","ref":"Monex.LazyTaskEither.html#lift_option/2"},{"type":"function","title":"Examples - Monex.LazyTaskEither.lift_option/2","doc":"iex> maybe = Monex.Maybe.just(42)\n    iex> result = Monex.LazyTaskEither.lift_option(maybe, fn -> \"No value\" end)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: 42}\n\n    iex> maybe = Monex.Maybe.nothing()\n    iex> result = Monex.LazyTaskEither.lift_option(maybe, fn -> \"No value\" end)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: \"No value\"}","ref":"Monex.LazyTaskEither.html#lift_option/2-examples"},{"type":"function","title":"Monex.LazyTaskEither.lift_predicate/3","doc":"Lifts a value into the `LazyTaskEither` monad based on a predicate.\nIf the predicate returns true, the value is wrapped in `Right`.\nOtherwise, the value from `on_false` is wrapped in `Left`.","ref":"Monex.LazyTaskEither.html#lift_predicate/3"},{"type":"function","title":"Examples - Monex.LazyTaskEither.lift_predicate/3","doc":"iex> result = Monex.LazyTaskEither.lift_predicate(10, &(&1 > 5), fn -> \"too small\" end)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: 10}\n\n    iex> result = Monex.LazyTaskEither.lift_predicate(3, &(&1 > 5), fn -> \"too small\" end)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: \"too small\"}","ref":"Monex.LazyTaskEither.html#lift_predicate/3-examples"},{"type":"function","title":"Monex.LazyTaskEither.pure/1","doc":"Alias for `right/1`.","ref":"Monex.LazyTaskEither.html#pure/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.pure/1","doc":"iex> result = Monex.LazyTaskEither.pure(42)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: 42}","ref":"Monex.LazyTaskEither.html#pure/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.right/1","doc":"Wraps a value in the `Right` monad, representing a successful computation.","ref":"Monex.LazyTaskEither.html#right/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.right/1","doc":"iex> result = Monex.LazyTaskEither.right(42)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: 42}","ref":"Monex.LazyTaskEither.html#right/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.run/1","doc":"Runs the `LazyTaskEither` task and returns the result, awaiting the task if necessary.","ref":"Monex.LazyTaskEither.html#run/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.run/1","doc":"iex> result = Monex.LazyTaskEither.right(42)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: 42}","ref":"Monex.LazyTaskEither.html#run/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.sequence/1","doc":"Sequences a list of `LazyTaskEither` values. If any value is `Left`, the sequencing stops\nand the first `Left` is returned. Otherwise, it returns a list of all `Right` values.","ref":"Monex.LazyTaskEither.html#sequence/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.sequence/1","doc":"iex> tasks = [Monex.LazyTaskEither.right(1), Monex.LazyTaskEither.right(2)]\n    iex> result = Monex.LazyTaskEither.sequence(tasks)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: [1, 2]}\n\n    iex> tasks = [Monex.LazyTaskEither.right(1), Monex.LazyTaskEither.left(\"error\")]\n    iex> result = Monex.LazyTaskEither.sequence(tasks)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: \"error\"}","ref":"Monex.LazyTaskEither.html#sequence/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.sequence_a/1","doc":"Sequences a list of `LazyTaskEither` values, accumulating all errors in case of multiple `Left` values.","ref":"Monex.LazyTaskEither.html#sequence_a/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.sequence_a/1","doc":"iex> tasks = [Monex.LazyTaskEither.right(1), Monex.LazyTaskEither.left(\"Error 1\"), Monex.LazyTaskEither.left(\"Error 2\")]\n    iex> result = Monex.LazyTaskEither.sequence_a(tasks)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: [\"Error 1\", \"Error 2\"]}","ref":"Monex.LazyTaskEither.html#sequence_a/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.to_result/1","doc":"Converts a `LazyTaskEither` monad into an Elixir result tuple.","ref":"Monex.LazyTaskEither.html#to_result/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.to_result/1","doc":"iex> lazy_result = Monex.LazyTaskEither.right(42)\n    iex> Monex.LazyTaskEither.to_result(lazy_result)\n    {:ok, 42}\n\n    iex> lazy_error = Monex.LazyTaskEither.left(\"error\")\n    iex> Monex.LazyTaskEither.to_result(lazy_error)\n    {:error, \"error\"}","ref":"Monex.LazyTaskEither.html#to_result/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.to_try!/1","doc":"Unwraps a `LazyTaskEither`, returning the value if it is a `Right`, or raising the exception if it is a `Left`.","ref":"Monex.LazyTaskEither.html#to_try!/1"},{"type":"function","title":"Examples - Monex.LazyTaskEither.to_try!/1","doc":"iex> lazy_result = Monex.LazyTaskEither.right(42)\n    iex> Monex.LazyTaskEither.to_try!(lazy_result)\n    42\n\n    iex> lazy_error = Monex.LazyTaskEither.left(%RuntimeError{message: \"error\"})\n    iex> Monex.LazyTaskEither.to_try!(lazy_error)\n    ** (RuntimeError) error","ref":"Monex.LazyTaskEither.html#to_try!/1-examples"},{"type":"function","title":"Monex.LazyTaskEither.traverse/2","doc":"Traverses a list with a function that returns `LazyTaskEither` values,\ncollecting the results into a single `LazyTaskEither`.","ref":"Monex.LazyTaskEither.html#traverse/2"},{"type":"function","title":"Examples - Monex.LazyTaskEither.traverse/2","doc":"iex> is_positive = fn num -> Monex.LazyTaskEither.lift_predicate(num, fn x -> x > 0 end, fn -> Integer.to_string(num) <> \" is not positive\" end) end\n    iex> result = Monex.LazyTaskEither.traverse([1, 2, 3], fn num -> is_positive.(num) end)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: [1, 2, 3]}\n\n    iex> result = Monex.LazyTaskEither.traverse([1, -2, 3], fn num -> is_positive.(num) end)\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: \"-2 is not positive\"}","ref":"Monex.LazyTaskEither.html#traverse/2-examples"},{"type":"function","title":"Monex.LazyTaskEither.validate/2","doc":"Validates a value using a list of validators.\nReturns a `Right` if all validators succeed, or a `Left` with a list of errors if any validator fails.","ref":"Monex.LazyTaskEither.html#validate/2"},{"type":"function","title":"Examples - Monex.LazyTaskEither.validate/2","doc":"iex> validator_1 = fn value -> if value > 0, do: Monex.LazyTaskEither.right(value), else: Monex.LazyTaskEither.left(\"too small\") end\n    iex> validator_2 = fn value -> if rem(value, 2) == 0, do: Monex.LazyTaskEither.right(value), else: Monex.LazyTaskEither.left(\"not even\") end\n    iex> result = Monex.LazyTaskEither.validate(4, [validator_1, validator_2])\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Right{value: 4}\n\n    iex> result = Monex.LazyTaskEither.validate(3, [validator_1, validator_2])\n    iex> Monex.LazyTaskEither.run(result)\n    %Monex.Either.Left{value: [\"not even\"]}","ref":"Monex.LazyTaskEither.html#validate/2-examples"},{"type":"type","title":"Monex.LazyTaskEither.t/2","doc":"","ref":"Monex.LazyTaskEither.html#t:t/2"},{"type":"module","title":"Monex.LazyTaskEither.Left","doc":"","ref":"Monex.LazyTaskEither.Left.html"},{"type":"function","title":"Monex.LazyTaskEither.Left.pure/1","doc":"","ref":"Monex.LazyTaskEither.Left.html#pure/1"},{"type":"type","title":"Monex.LazyTaskEither.Left.t/1","doc":"","ref":"Monex.LazyTaskEither.Left.html#t:t/1"},{"type":"module","title":"Monex.LazyTaskEither.Right","doc":"","ref":"Monex.LazyTaskEither.Right.html"},{"type":"function","title":"Monex.LazyTaskEither.Right.pure/1","doc":"","ref":"Monex.LazyTaskEither.Right.html#pure/1"},{"type":"type","title":"Monex.LazyTaskEither.Right.t/1","doc":"","ref":"Monex.LazyTaskEither.Right.html#t:t/1"},{"type":"module","title":"Monex.Maybe","doc":"The `Monex.Maybe` module provides an implementation of the `Maybe` monad, representing optional values as either `Just` (a value) or `Nothing` (no value).","ref":"Monex.Maybe.html"},{"type":"module","title":"Constructors - Monex.Maybe","doc":"- `pure/1`: Wraps a value in the `Just` monad.\n  - `just/1`: Alias for `pure/1`.\n  - `nothing/0`: Returns a `Nothing` value.","ref":"Monex.Maybe.html#module-constructors"},{"type":"module","title":"Lifts - Monex.Maybe","doc":"- `lift_either/1`: Lifts an `Either` value to a `Maybe`.\n  - `lift_predicate/2`: Lifts a value into a `Maybe` based on a predicate.","ref":"Monex.Maybe.html#module-lifts"},{"type":"module","title":"Refinements - Monex.Maybe","doc":"- `just?/1`: Checks if a `Maybe` is a `Just` value.\n  - `nothing?/1`: Checks if a `Maybe` is a `Nothing` value.","ref":"Monex.Maybe.html#module-refinements"},{"type":"module","title":"Comparison - Monex.Maybe","doc":"- `get_eq/1`: Returns a custom equality function for `Maybe` values.\n  - `get_ord/1`: Returns a custom ordering function for `Maybe` values.","ref":"Monex.Maybe.html#module-comparison"},{"type":"module","title":"Matching & Filtering - Monex.Maybe","doc":"- `filter/2`: Filters the value inside a `Maybe` using a predicate.\n  - `get_or_else/2`: Retrieves the value from a `Maybe`, returning a default if `Nothing`.","ref":"Monex.Maybe.html#module-matching-filtering"},{"type":"module","title":"Sequencing - Monex.Maybe","doc":"- `sequence/1`: Sequences a list of `Maybe` values.\n  - `traverse/2`: Applies a function to a list and sequences the result.","ref":"Monex.Maybe.html#module-sequencing"},{"type":"module","title":"Elixir Interops - Monex.Maybe","doc":"- `from_nil/1`: Converts `nil` to a `Maybe`.\n  - `to_nil/1`: Converts a `Maybe` to `nil` or its value.\n  - `from_try/1`: Wraps a value in a `Maybe`, catching exceptions.\n  - `to_try!/2`: Converts a `Maybe` to its value or raises an exception if `Nothing`.\n  - `from_result/1`: Converts a result (`{:ok, _}` or `{:error, _}`) to a `Maybe`.\n  - `to_result/1`: Converts a `Maybe` to a result (`{:ok, value}` or `{:error, :nothing}`).","ref":"Monex.Maybe.html#module-elixir-interops"},{"type":"function","title":"Monex.Maybe.filter/2","doc":"Filters the value inside a `Maybe` using the given `predicate`. If the predicate returns `true`,\nthe value is kept, otherwise `Nothing` is returned.","ref":"Monex.Maybe.html#filter/2"},{"type":"function","title":"Examples - Monex.Maybe.filter/2","doc":"iex> Monex.Maybe.filter(Monex.Maybe.just(5), fn x -> x > 3 end)\n    %Monex.Maybe.Just{value: 5}\n\n    iex> Monex.Maybe.filter(Monex.Maybe.just(2), fn x -> x > 3 end)\n    %Monex.Maybe.Nothing{}","ref":"Monex.Maybe.html#filter/2-examples"},{"type":"function","title":"Monex.Maybe.from_nil/1","doc":"Converts `nil` to `Nothing`, and any other value to `Just`.","ref":"Monex.Maybe.html#from_nil/1"},{"type":"function","title":"Examples - Monex.Maybe.from_nil/1","doc":"iex> Monex.Maybe.from_nil(nil)\n    %Monex.Maybe.Nothing{}\n\n    iex> Monex.Maybe.from_nil(5)\n    %Monex.Maybe.Just{value: 5}","ref":"Monex.Maybe.html#from_nil/1-examples"},{"type":"function","title":"Monex.Maybe.from_result/1","doc":"Converts a result (`{:ok, _}` or `{:error, _}`) to a `Maybe`.","ref":"Monex.Maybe.html#from_result/1"},{"type":"function","title":"Examples - Monex.Maybe.from_result/1","doc":"iex> Monex.Maybe.from_result({:ok, 5})\n    %Monex.Maybe.Just{value: 5}\n\n    iex> Monex.Maybe.from_result({:error, :something})\n    %Monex.Maybe.Nothing{}","ref":"Monex.Maybe.html#from_result/1-examples"},{"type":"function","title":"Monex.Maybe.from_try/1","doc":"Wraps a value in a `Maybe`, catching any exceptions. If an exception occurs, `Nothing` is returned.","ref":"Monex.Maybe.html#from_try/1"},{"type":"function","title":"Examples - Monex.Maybe.from_try/1","doc":"iex> Monex.Maybe.from_try(fn -> 5 end)\n    %Monex.Maybe.Just{value: 5}\n\n    iex> Monex.Maybe.from_try(fn -> raise \"error\" end)\n    %Monex.Maybe.Nothing{}","ref":"Monex.Maybe.html#from_try/1-examples"},{"type":"function","title":"Monex.Maybe.get_eq/1","doc":"Creates a custom equality function for `Maybe` values using the provided `custom_eq`.","ref":"Monex.Maybe.html#get_eq/1"},{"type":"function","title":"Examples - Monex.Maybe.get_eq/1","doc":"iex> eq = Monex.Maybe.get_eq(%{equals?: fn x, y -> x == y end})\n    iex> eq.equals?.(Monex.Maybe.just(5), Monex.Maybe.just(5))\n    true\n\n    iex> eq.equals?.(Monex.Maybe.just(5), Monex.Maybe.nothing())\n    false","ref":"Monex.Maybe.html#get_eq/1-examples"},{"type":"function","title":"Monex.Maybe.get_or_else/2","doc":"Retrieves the value from a `Maybe`, returning the `default` value if `Nothing`.","ref":"Monex.Maybe.html#get_or_else/2"},{"type":"function","title":"Examples - Monex.Maybe.get_or_else/2","doc":"iex> Monex.Maybe.get_or_else(Monex.Maybe.just(5), 0)\n    5\n\n    iex> Monex.Maybe.get_or_else(Monex.Maybe.nothing(), 0)\n    0","ref":"Monex.Maybe.html#get_or_else/2-examples"},{"type":"function","title":"Monex.Maybe.get_ord/1","doc":"Creates a custom ordering function for `Maybe` values using the provided `custom_ord`.","ref":"Monex.Maybe.html#get_ord/1"},{"type":"function","title":"Examples - Monex.Maybe.get_ord/1","doc":"iex> ord = Monex.Maybe.get_ord(%{lt?: fn x, y -> x   ord.lt?.(Monex.Maybe.just(3), Monex.Maybe.just(5))\n    true","ref":"Monex.Maybe.html#get_ord/1-examples"},{"type":"function","title":"Monex.Maybe.just/1","doc":"Alias for `pure/1`.","ref":"Monex.Maybe.html#just/1"},{"type":"function","title":"Monex.Maybe.just?/1","doc":"Returns `true` if the `Maybe` is a `Just` value.","ref":"Monex.Maybe.html#just?/1"},{"type":"function","title":"Examples - Monex.Maybe.just?/1","doc":"iex> Monex.Maybe.just?(Monex.Maybe.just(5))\n    true\n\n    iex> Monex.Maybe.just?(Monex.Maybe.nothing())\n    false","ref":"Monex.Maybe.html#just?/1-examples"},{"type":"function","title":"Monex.Maybe.lift_either/1","doc":"Converts an `Either` value into a `Maybe`. `Right` is converted to `Just`, `Left` is converted to `Nothing`.","ref":"Monex.Maybe.html#lift_either/1"},{"type":"function","title":"Examples - Monex.Maybe.lift_either/1","doc":"iex> Monex.Maybe.lift_either(Monex.Either.right(5))\n    %Monex.Maybe.Just{value: 5}\n\n    iex> Monex.Maybe.lift_either(Monex.Either.left(\"Error\"))\n    %Monex.Maybe.Nothing{}","ref":"Monex.Maybe.html#lift_either/1-examples"},{"type":"function","title":"Monex.Maybe.lift_predicate/2","doc":"Lifts a value into a `Maybe` based on the result of a predicate.","ref":"Monex.Maybe.html#lift_predicate/2"},{"type":"function","title":"Examples - Monex.Maybe.lift_predicate/2","doc":"iex> Monex.Maybe.lift_predicate(5, fn x -> x > 3 end)\n    %Monex.Maybe.Just{value: 5}\n\n    iex> Monex.Maybe.lift_predicate(2, fn x -> x > 3 end)\n    %Monex.Maybe.Nothing{}","ref":"Monex.Maybe.html#lift_predicate/2-examples"},{"type":"function","title":"Monex.Maybe.nothing/0","doc":"Returns a `Nothing` value.","ref":"Monex.Maybe.html#nothing/0"},{"type":"function","title":"Examples - Monex.Maybe.nothing/0","doc":"iex> Monex.Maybe.nothing()\n    %Monex.Maybe.Nothing{}","ref":"Monex.Maybe.html#nothing/0-examples"},{"type":"function","title":"Monex.Maybe.nothing?/1","doc":"Returns `true` if the `Maybe` is a `Nothing` value.","ref":"Monex.Maybe.html#nothing?/1"},{"type":"function","title":"Examples - Monex.Maybe.nothing?/1","doc":"iex> Monex.Maybe.nothing?(Monex.Maybe.nothing())\n    true\n\n    iex> Monex.Maybe.nothing?(Monex.Maybe.just(5))\n    false","ref":"Monex.Maybe.html#nothing?/1-examples"},{"type":"function","title":"Monex.Maybe.pure/1","doc":"Wraps a value in the `Just` monad.","ref":"Monex.Maybe.html#pure/1"},{"type":"function","title":"Examples - Monex.Maybe.pure/1","doc":"iex> Monex.Maybe.pure(5)\n    %Monex.Maybe.Just{value: 5}","ref":"Monex.Maybe.html#pure/1-examples"},{"type":"function","title":"Monex.Maybe.sequence/1","doc":"Sequences a list of `Maybe` values into a `Maybe` of a list.","ref":"Monex.Maybe.html#sequence/1"},{"type":"function","title":"Examples - Monex.Maybe.sequence/1","doc":"iex> Monex.Maybe.sequence([Monex.Maybe.just(1), Monex.Maybe.just(2)])\n    %Monex.Maybe.Just{value: [1, 2]}\n\n    iex> Monex.Maybe.sequence([Monex.Maybe.just(1), Monex.Maybe.nothing()])\n    %Monex.Maybe.Nothing{}","ref":"Monex.Maybe.html#sequence/1-examples"},{"type":"function","title":"Monex.Maybe.to_nil/1","doc":"Converts a `Maybe` to `nil` or its wrapped value.","ref":"Monex.Maybe.html#to_nil/1"},{"type":"function","title":"Examples - Monex.Maybe.to_nil/1","doc":"iex> Monex.Maybe.to_nil(Monex.Maybe.just(5))\n    5\n\n    iex> Monex.Maybe.to_nil(Monex.Maybe.nothing())\n    nil","ref":"Monex.Maybe.html#to_nil/1-examples"},{"type":"function","title":"Monex.Maybe.to_result/1","doc":"Converts a `Maybe` to a result (`{:ok, value}` or `{:error, :nothing}`).","ref":"Monex.Maybe.html#to_result/1"},{"type":"function","title":"Examples - Monex.Maybe.to_result/1","doc":"iex> Monex.Maybe.to_result(Monex.Maybe.just(5))\n    {:ok, 5}\n\n    iex> Monex.Maybe.to_result(Monex.Maybe.nothing())\n    {:error, :nothing}","ref":"Monex.Maybe.html#to_result/1-examples"},{"type":"function","title":"Monex.Maybe.to_try!/2","doc":"Converts a `Maybe` to its wrapped value, raising an exception if it is `Nothing`.","ref":"Monex.Maybe.html#to_try!/2"},{"type":"function","title":"Examples - Monex.Maybe.to_try!/2","doc":"iex> Monex.Maybe.to_try!(Monex.Maybe.just(5))\n    5\n\n    iex> Monex.Maybe.to_try!(Monex.Maybe.nothing(), \"No value found\")\n    ** (RuntimeError) No value found","ref":"Monex.Maybe.html#to_try!/2-examples"},{"type":"function","title":"Monex.Maybe.traverse/2","doc":"Applies a function to each element of a list and sequences the result.","ref":"Monex.Maybe.html#traverse/2"},{"type":"function","title":"Examples - Monex.Maybe.traverse/2","doc":"iex> Monex.Maybe.traverse(fn x -> Monex.Maybe.just(x * 2) end, [1, 2])\n    %Monex.Maybe.Just{value: [2, 4]}","ref":"Monex.Maybe.html#traverse/2-examples"},{"type":"type","title":"Monex.Maybe.t/1","doc":"","ref":"Monex.Maybe.html#t:t/1"},{"type":"module","title":"Monex.Maybe.Just","doc":"Represents the `Just` variant of the `Maybe` monad, used to model the presence of a value.\n\nThis module implements the following protocols:\n  - `Monex.Monad`: Implements the `bind/2`, `map/2`, and `ap/2` functions for monadic operations.\n  - `Monex.Foldable`: Provides `fold_l/3` and `fold_r/3` to handle folding for `Just` values.\n  - `Monex.Eq`: Defines equality checks between `Just` and other `Maybe` values.\n  - `Monex.Ord`: Defines ordering logic for `Just` and `Nothing` values.\n\nThe `Just` monad provides implementations that propagate the wrapped value through operations.","ref":"Monex.Maybe.Just.html"},{"type":"function","title":"Monex.Maybe.Just.pure/1","doc":"Creates a new `Just` value.\n\nThe `pure/1` function wraps a value in the `Just` monad, representing the presence of the value.","ref":"Monex.Maybe.Just.html#pure/1"},{"type":"function","title":"Examples - Monex.Maybe.Just.pure/1","doc":"iex> Monex.Maybe.Just.pure(5)\n    %Monex.Maybe.Just{value: 5}","ref":"Monex.Maybe.Just.html#pure/1-examples"},{"type":"function","title":"Raises - Monex.Maybe.Just.pure/1","doc":"- `ArgumentError` if `nil` is provided.\n\n    iex> Monex.Maybe.Just.pure(nil)\n    ** (ArgumentError) Cannot wrap nil in a Just","ref":"Monex.Maybe.Just.html#pure/1-raises"},{"type":"type","title":"Monex.Maybe.Just.t/1","doc":"","ref":"Monex.Maybe.Just.html#t:t/1"},{"type":"module","title":"Monex.Maybe.Nothing","doc":"Represents the `Nothing` variant of the `Maybe` monad, used to model the absence of a value.\n\nThis module implements the following protocols:\n  - `Monex.Monad`: Implements the `bind/2`, `map/2`, and `ap/2` functions for monadic operations.\n  - `Monex.Foldable`: Provides `fold_l/3` and `fold_r/3` to handle folding with default behavior for `Nothing`.\n  - `Monex.Eq`: Defines equality checks between `Nothing` and other `Maybe` values.\n  - `Monex.Ord`: Defines ordering logic for `Nothing` and `Just` values.\n\nThe `Nothing` monad provides default implementations where the absence of a value is propagated through operations.","ref":"Monex.Maybe.Nothing.html"},{"type":"function","title":"Monex.Maybe.Nothing.pure/0","doc":"Creates a new `Nothing` value.","ref":"Monex.Maybe.Nothing.html#pure/0"},{"type":"function","title":"Examples - Monex.Maybe.Nothing.pure/0","doc":"iex> Monex.Maybe.Nothing.pure()\n    %Monex.Maybe.Nothing{}","ref":"Monex.Maybe.Nothing.html#pure/0-examples"},{"type":"type","title":"Monex.Maybe.Nothing.t/0","doc":"","ref":"Monex.Maybe.Nothing.html#t:t/0"},{"type":"protocol","title":"Monex.Monad","doc":"The `Monex.Monad` protocol defines the core monadic operations: `ap/2`, `bind/2`, and `map/2`.\n\nA monad is an abstraction that represents computations as a series of steps.\nThis protocol is designed to be implemented by types that wrap a value and allow chaining of operations while preserving the wrapped context.","ref":"Monex.Monad.html"},{"type":"protocol","title":"Functions - Monex.Monad","doc":"- `map/2`: Applies a function to the value within the monad.\n- `bind/2`: Chains operations by passing the unwrapped value into a function that returns another monad.\n- `ap/2`: Applies a monadic function to another monadic value.","ref":"Monex.Monad.html#module-functions"},{"type":"function","title":"Monex.Monad.ap/2","doc":"Applies a monadic function to another monadic value.\n\nThe function `func` is expected to be wrapped in a monadic context and is applied to the value `m` within its own monadic context.\nThe result is wrapped in the same context as the original monad.","ref":"Monex.Monad.html#ap/2"},{"type":"function","title":"Examples - Monex.Monad.ap/2","doc":"iex> Monex.Monad.ap(Monex.Maybe.just(fn x -> x * 2 end), Monex.Maybe.just(3))\n    %Monex.Maybe.Just{value: 6}\n\nIn the case of `Nothing`:\n\n    iex> Monex.Monad.ap(Monex.Maybe.nothing(), Monex.Maybe.just(3))\n    %Monex.Maybe.Nothing{}","ref":"Monex.Monad.html#ap/2-examples"},{"type":"function","title":"Monex.Monad.bind/2","doc":"Chains a monadic operation.\n\nThe `bind/2` function takes a monad `m` and a function `func`. The function `func` is applied to the unwrapped value of `m`,\nand must return another monad. The result is the new monad produced by `func`.\n\nThis is the core operation that allows chaining of computations, with the value being passed from one function to the next in a sequence.","ref":"Monex.Monad.html#bind/2"},{"type":"function","title":"Examples - Monex.Monad.bind/2","doc":"iex> Monex.Monad.bind(Monex.Maybe.just(5), fn x -> Monex.Maybe.just(x * 2) end)\n    %Monex.Maybe.Just{value: 10}\n\nIn the case of `Nothing`:\n\n    iex> Monex.Monad.bind(Monex.Maybe.nothing(), fn _ -> Monex.Maybe.just(5) end)\n    %Monex.Maybe.Nothing{}","ref":"Monex.Monad.html#bind/2-examples"},{"type":"function","title":"Monex.Monad.map/2","doc":"Maps a function over the value inside the monad.\n\nThe `map/2` function takes a monad `m` and a function `func`, applies the function to the value inside `m`, and returns a new monad\ncontaining the result. The original monadic context is preserved.","ref":"Monex.Monad.html#map/2"},{"type":"function","title":"Examples - Monex.Monad.map/2","doc":"iex> Monex.Monad.map(Monex.Maybe.just(2), fn x -> x + 3 end)\n    %Monex.Maybe.Just{value: 5}\n\nIn the case of `Nothing`:\n\n    iex> Monex.Monad.map(Monex.Maybe.nothing(), fn x -> x + 3 end)\n    %Monex.Maybe.Nothing{}","ref":"Monex.Monad.html#map/2-examples"},{"type":"type","title":"Monex.Monad.t/0","doc":"","ref":"Monex.Monad.html#t:t/0"},{"type":"module","title":"Monex.Operators","doc":"","ref":"Monex.Operators.html"},{"type":"macro","title":"Monex.Operators.<<~/2","doc":"","ref":"Monex.Operators.html#%3C%3C~/2"},{"type":"macro","title":"Monex.Operators.~>/2","doc":"","ref":"Monex.Operators.html#~%3E/2"},{"type":"macro","title":"Monex.Operators.~>>/2","doc":"","ref":"Monex.Operators.html#~%3E%3E/2"},{"type":"protocol","title":"Monex.Ord","doc":"The `Monex.Ord` protocol defines a set of comparison functions: `lt?/2`, `le?/2`, `gt?/2`, and `ge?/2`.\n\nThis protocol is intended for types that can be ordered, allowing values to be compared for their relative positions in a total order.\n\nBy implementing this protocol, you can provide custom logic for how values of a certain type are compared.","ref":"Monex.Ord.html"},{"type":"protocol","title":"Fallback - Monex.Ord","doc":"The protocol uses `@fallback_to_any true`, which means if a specific type does not implement `Monex.Ord`,\nthe default implementation for `Any` will be used, which relies on Elixir's built-in comparison operators.","ref":"Monex.Ord.html#module-fallback"},{"type":"function","title":"Monex.Ord.ge?/2","doc":"Returns `true` if `a` is greater than or equal to `b`, otherwise returns `false`.","ref":"Monex.Ord.html#ge?/2"},{"type":"function","title":"Examples - Monex.Ord.ge?/2","doc":"iex> Monex.Ord.ge?(Monex.Maybe.just(5), Monex.Maybe.just(3))\n    true\n\n    iex> Monex.Ord.ge?(Monex.Maybe.just(5), Monex.Maybe.just(5))\n    true\n\n    iex> Monex.Ord.ge?(Monex.Maybe.just(3), Monex.Maybe.just(5))\n    false","ref":"Monex.Ord.html#ge?/2-examples"},{"type":"function","title":"Monex.Ord.gt?/2","doc":"Returns `true` if `a` is greater than `b`, otherwise returns `false`.","ref":"Monex.Ord.html#gt?/2"},{"type":"function","title":"Examples - Monex.Ord.gt?/2","doc":"iex> Monex.Ord.gt?(Monex.Maybe.just(5), Monex.Maybe.just(3))\n    true\n\n    iex> Monex.Ord.gt?(Monex.Maybe.just(3), Monex.Maybe.just(5))\n    false\n\n    iex> Monex.Ord.gt?(Monex.Maybe.just(3), Monex.Maybe.nothing())\n    true","ref":"Monex.Ord.html#gt?/2-examples"},{"type":"function","title":"Monex.Ord.le?/2","doc":"Returns `true` if `a` is less than or equal to `b`, otherwise returns `false`.","ref":"Monex.Ord.html#le?/2"},{"type":"function","title":"Examples - Monex.Ord.le?/2","doc":"iex> Monex.Ord.le?(Monex.Maybe.just(3), Monex.Maybe.just(5))\n    true\n\n    iex> Monex.Ord.le?(Monex.Maybe.just(5), Monex.Maybe.just(5))\n    true\n\n    iex> Monex.Ord.le?(Monex.Maybe.just(5), Monex.Maybe.just(3))\n    false","ref":"Monex.Ord.html#le?/2-examples"},{"type":"function","title":"Monex.Ord.lt?/2","doc":"Returns `true` if `a` is less than `b`, otherwise returns `false`.","ref":"Monex.Ord.html#lt?/2"},{"type":"function","title":"Examples - Monex.Ord.lt?/2","doc":"iex> Monex.Ord.lt?(Monex.Maybe.just(3), Monex.Maybe.just(5))\n    true\n\n    iex> Monex.Ord.lt?(Monex.Maybe.just(5), Monex.Maybe.just(3))\n    false\n\n    iex> Monex.Ord.lt?(Monex.Maybe.nothing(), Monex.Maybe.just(3))\n    true","ref":"Monex.Ord.html#lt?/2-examples"},{"type":"type","title":"Monex.Ord.t/0","doc":"All the types that implement this protocol.","ref":"Monex.Ord.html#t:t/0"},{"type":"module","title":"Monex.Predicate","doc":"The `Monex.Predicate` module provides utility functions for working with predicates.\nPredicates are functions that return a boolean (`true` or `false`), and this module allows you to combine them using logical operations.\n\nYou can combine multiple predicates into a single function using:\n- `p_and/2`: Combines two predicates using logical AND.\n- `p_or/2`: Combines two predicates using logical OR.\n- `p_not/1`: Negates a predicate.\n\nThese functions are useful for building complex conditional logic in a functional and composable way.","ref":"Monex.Predicate.html"},{"type":"module","title":"Examples - Monex.Predicate","doc":"","ref":"Monex.Predicate.html#module-examples"},{"type":"module","title":"Using `p_and/2` to combine predicates: - Monex.Predicate","doc":"iex> is_adult = fn person -> person.age >= 18 end\n    iex> has_ticket = fn person -> person.tickets > 0 end\n    iex> can_enter = Monex.Predicate.p_and(is_adult, has_ticket)\n    iex> can_enter.(%{age: 20, tickets: 1})\n    true\n    iex> can_enter.(%{age: 16, tickets: 1})\n    false","ref":"Monex.Predicate.html#module-using-p_and-2-to-combine-predicates"},{"type":"module","title":"Using `p_or/2` for alternative conditions: - Monex.Predicate","doc":"iex> is_vip = fn person -> person.vip end\n    iex> is_sponsor = fn person -> person.sponsor end\n    iex> can_access_vip_area = Monex.Predicate.p_or(is_vip, is_sponsor)\n    iex> can_access_vip_area.(%{vip: true, sponsor: false})\n    true\n    iex> can_access_vip_area.(%{vip: false, sponsor: false})\n    false","ref":"Monex.Predicate.html#module-using-p_or-2-for-alternative-conditions"},{"type":"module","title":"Using `p_not/1` to negate a condition: - Monex.Predicate","doc":"iex> is_minor = fn person -> person.age < 18 end\n    iex> is_adult = Monex.Predicate.p_not(is_minor)\n    iex> is_adult.(%{age: 20})\n    true\n    iex> is_adult.(%{age: 16})\n    false","ref":"Monex.Predicate.html#module-using-p_not-1-to-negate-a-condition"},{"type":"function","title":"Monex.Predicate.p_and/2","doc":"Combines two predicates (`pred1` and `pred2`) using logical AND.\nReturns a new predicate that returns `true` only if both `pred1` and `pred2` return `true`.","ref":"Monex.Predicate.html#p_and/2"},{"type":"function","title":"Examples - Monex.Predicate.p_and/2","doc":"iex> is_adult = fn person -> person.age >= 18 end\n    iex> has_ticket = fn person -> person.tickets > 0 end\n    iex> can_enter = Monex.Predicate.p_and(is_adult, has_ticket)\n    iex> can_enter.(%{age: 20, tickets: 1})\n    true\n    iex> can_enter.(%{age: 16, tickets: 1})\n    false","ref":"Monex.Predicate.html#p_and/2-examples"},{"type":"function","title":"Monex.Predicate.p_not/1","doc":"Negates a predicate (`pred`).\nReturns a new predicate that returns `true` if `pred` returns `false`, and vice versa.","ref":"Monex.Predicate.html#p_not/1"},{"type":"function","title":"Examples - Monex.Predicate.p_not/1","doc":"iex> is_minor = fn person -> person.age < 18 end\n    iex> is_adult = Monex.Predicate.p_not(is_minor)\n    iex> is_adult.(%{age: 20})\n    true\n    iex> is_adult.(%{age: 16})\n    false","ref":"Monex.Predicate.html#p_not/1-examples"},{"type":"function","title":"Monex.Predicate.p_or/2","doc":"Combines two predicates (`pred1` and `pred2`) using logical OR.\nReturns a new predicate that returns `true` if either `pred1` or `pred2` returns `true`.","ref":"Monex.Predicate.html#p_or/2"},{"type":"function","title":"Examples - Monex.Predicate.p_or/2","doc":"iex> is_vip = fn person -> person.vip end\n    iex> is_sponsor = fn person -> person.sponsor end\n    iex> can_access_vip_area = Monex.Predicate.p_or(is_vip, is_sponsor)\n    iex> can_access_vip_area.(%{vip: true, sponsor: false})\n    true\n    iex> can_access_vip_area.(%{vip: false, sponsor: false})\n    false","ref":"Monex.Predicate.html#p_or/2-examples"},{"type":"extras","title":"Monex","doc":"# Monex\n\nElixir is a dynamically typed language and lacks the static type system typically used in functional languages to enforce monadic patterns. Instead, Elixir leverages pattern matching, `defimpl`, and branded structs to create structured abstractions that behave like monads. Monex builds on these principles to provide useful tools for functional programming.","ref":"readme.html"},{"type":"extras","title":"Features - Monex","doc":"Monex provides various tools for working with monads, including constructors, refinements, folding, matching, and more.","ref":"readme.html#features"},{"type":"extras","title":"Monads - Monex","doc":"Monads in Monex support operations like `bind`, `map`, and `ap`, allowing for flexible control over computations:\n\n- **Identity**: A base monad that returns its value unchanged.\n- **Maybe**: Encapsulates optional values as `Just` (a value) or `Nothing` (no value).\n- **Either**: Represents a computation that can result in either `Right` (success) or `Left` (error).\n- **LazyTask**: Handles asynchronous computations that can be deferred.\n- **LazyTaskEither**: Handles asynchronous computations that may result in success or failure, with deferred execution.","ref":"readme.html#monads"},{"type":"extras","title":"Operators - Monex","doc":"Monex provides operators that offer a more concise syntax for working with monads:\n\n- **`~>/2`**: Functor map. Applies a function to the value in a monad to transform the value within the monad's context.\n- **`~>>/2`**: Monad bind. Chains computations, passing the result of one monad to a function that returns another monad of the same type.\n- **`<<~/2`**: Applicative apply. Applies a function wrapped in a monad to a value in another monad of the same type.\n\n*Operators make code more compact, but they come with a trade-off in readability compared to Elixir’s standard pipe syntax.*","ref":"readme.html#operators"},{"type":"extras","title":"Constructors - Monex","doc":"Monex provides constructors for each monad, allowing values to be wrapped in the appropriate monadic context:\n\n- **`pure/1`**: Wraps a value in a monad, initializing a computation with a known value.\n- **`just/1`**: Constructs a `Just` for the `Maybe` monad, representing the presence of a value.\n- **`nothing/0`**: Constructs a `Nothing` for the `Maybe` monad, representing the absence of a value.","ref":"readme.html#constructors"},{"type":"extras","title":"Refinements - Monex","doc":"Refinements allow for inspection of monadic values and the extraction of useful information:\n\n- **`just?/1`**: Checks if a `Maybe` value is a `Just`.\n- **`nothing?/1`**: Checks if a `Maybe` value is `Nothing`.","ref":"readme.html#refinements"},{"type":"extras","title":"Comparison - Monex","doc":"Monex provides tools for comparing monadic values:\n\n- **Equality**: Monads can be compared for equality using custom functions to determine if they represent the same state or value.\n- **Order**: Monex supports ordering monads based on their contained values, enabling sorting or comparison between monadic values.","ref":"readme.html#comparison"},{"type":"extras","title":"Folding - Monex","doc":"Folding collapses a monadic structure into a single result by applying functions in a specific order. Monex defines two core folding operations:\n\n- **`fold_l/3`**: Folds a structure from the left, applying functions sequentially from left to right.\n- **`fold_r/3`**: Folds a structure from the right, applying functions from right to left.\n\nFolding is used to reduce monadic or predicate-based structures to a single value, such as success or failure.","ref":"readme.html#folding"},{"type":"extras","title":"Matching - Monex","doc":"Matching provides a way to handle different cases of a monadic value (`Right`, `Left`, `Just`, `Nothing`) and define behavior for each scenario:\n\n- **`get_or_else/2`**: Retrieves a value from a monad or provides a default value if the monad represents a failure.\n- **`filter_or_else/3`**: Filters the value inside a monad based on a predicate, converting successes to failures if the condition is not met.","ref":"readme.html#matching"},{"type":"extras","title":"Sequencing - Monex","doc":"Monads allow for chaining multiple computations in sequence, passing results from one computation to the next:\n\n- **`sequence/1`**: Sequences a list of monads, returning a monad with a list of all `Right` or `Just` values, or the first `Left` or `Nothing` encountered.\n- **`traverse/2`**: Applies a function to a list that returns monads, sequencing the results and propagating successes or failures.","ref":"readme.html#sequencing"},{"type":"extras","title":"Validation - Monex","doc":"Monex supports validation workflows by combining multiple checks into a single monadic operation:\n\n- **`sequence_a/1`**: Sequences a list of applicatives without short-circuiting, collecting all successes if all values are valid or accumulating all errors if any failures occur. This ensures that the entire list is processed, even if some elements fail, making it suitable for scenarios where gathering all errors is preferred over stopping at the first failure.","ref":"readme.html#validation"},{"type":"extras","title":"Lifting - Monex","doc":"Lifting provides functionality to convert values between monads or wrap non-monadic values in a monadic context:\n\n- **`lift_predicate/3`**: Lifts a value into a monad based on a predicate. If the predicate holds, the value is wrapped in a success; otherwise, it becomes a failure.\n- **`lift_option/2`**: Converts a `Maybe` monad into an `Either` monad. If the `Maybe` is `Nothing`, it returns a `Left` with an error message.","ref":"readme.html#lifting"},{"type":"extras","title":"Elixir Interops - Monex","doc":"Monex integrates with common Elixir idioms and data structures like `{:ok, value}` and `{:error, reason}` tuples:\n\n- **`from_result/1`**: Converts a result tuple (`{:ok, value}` or `{:error, reason}`) into an `Either` monad.\n- **`to_result/1`**: Converts an `Either` monad back into a result tuple.\n- **`from_try/1`**: Wraps a function in an `Either` monad, catching exceptions as `Left`.\n- **`to_try!/1`**: Extracts a value from an `Either` monad or raises an exception if it is a `Left`.","ref":"readme.html#elixir-interops"},{"type":"extras","title":"Installation - Monex","doc":"To use Monex, add it to the list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:monex, \"~> 0.1.0\"}\n  ]\nend\n```\n\nThen, run the following command to fetch the dependencies:\n\n```bash\nmix deps.get\n```","ref":"readme.html#installation"},{"type":"extras","title":"Documentation - Monex","doc":"Full documentation is available on [GitHub Pages](https://jkwa.github.io/monex/readme.html).","ref":"readme.html#documentation"},{"type":"extras","title":"Contributing - Monex","doc":"1. Fork the repository.\n2. Create a new branch for the feature or bugfix (`git checkout -b feature-branch`).\n3. Commit changes (`git commit -am 'Add new feature'`).\n4. Push the branch (`git push origin feature-branch`).\n5. Create a pull request.","ref":"readme.html#contributing"},{"type":"extras","title":"License - Monex","doc":"This project is licensed under the MIT License.","ref":"readme.html#license"}],"content_type":"text/markdown","producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}